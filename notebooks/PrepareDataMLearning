{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PrepareDataMLearning","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"9TMn6iZYTs7v","colab_type":"text"},"cell_type":"markdown","source":["In this notebook we aim to learn to predict for each stroke of the dataset the letter it belongs to. \n","With this knowledge, we predict for the strokes of the drawings which letter could be represented in it"]},{"metadata":{"id":"l_ELDe__UHck","colab_type":"text"},"cell_type":"markdown","source":["# Init"]},{"metadata":{"id":"qVzqR0ihdnxZ","colab_type":"code","colab":{}},"cell_type":"code","source":["import base64, collections, io, itertools, functools, json, os, random, re, textwrap, time, urllib\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from matplotlib import pyplot\n","import seaborn as sns\n","import string\n","sns.set_style(\"white\")\n","pyplot.style.use('default')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BTbmyNC7TCen","colab_type":"code","colab":{}},"cell_type":"code","source":["data_path = '/content/gdrive/My Drive/Colab Notebooks/copainter_data'\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"LxIIragoUS12","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"8ef5d51f-61a0-4fef-a923-1fc7999f57ae","executionInfo":{"status":"ok","timestamp":1553073943325,"user_tz":-60,"elapsed":3165,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}}},"cell_type":"code","source":["if data_path.startswith('/content/gdrive/'):\n","  from google.colab import drive\n","  assert data_path.startswith('/content/gdrive/My Drive/'), \\\n","         'Google Drive paths must start with \"/content/gdrive/My Drive/\"!'\n","  drive.mount('/content/gdrive')\n","\n","if data_path.startswith('gs://'):\n","  from google.colab import auth\n","  auth.authenticate_user()"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"metadata":{"id":"C72ihp3KUK82","colab_type":"text"},"cell_type":"markdown","source":["# Load the entire letter dataset from UJIPEN"]},{"metadata":{"id":"xHjRv5oAYanX","colab_type":"code","outputId":"c02154d0-8365-4dd6-d2dd-1cb176074d9d","executionInfo":{"status":"ok","timestamp":1553073944957,"user_tz":-60,"elapsed":4748,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["def convert(line, stroke=False):\n","    \"\"\"Converts single JSON line and converts 'drawing' to list of np.array.\"\"\"\n","    d = json.loads(line)\n","    if(stroke):\n","      d['stroke'] = [np.array(stroke) for stroke in d['stroke']]\n","    else:\n","      d['drawing'] = [np.array(stroke) for stroke in d['drawing']]\n","    return d\n","  \n","def loaditer(name, unrecognized=False, letter=False, stroke=True, scaled=False):\n","  \"\"\"Returns iterable of drawings in specified file.\n","\n","  Args:\n","    name: Name of the downloaded object (e.g. \"elephant\").\n","    unrecognized: Whether to include drawings that were not recognized\n","        by Google AI (i.e. the hard ones).\n","  \"\"\"\n","  \n","    \n","  if(letter): \n","    if(scaled):\n","      data_pathb = data_path+'/handwriting/'\n","    else:\n","      data_pathb = data_path+'/handwriting/no_scale/'\n","  elif (stroke):\n","    data_pathb = data_path+'/handwriting/no_scale/strokes/'\n","  else:\n","    data_pathb = data_path\n","  \n","  for line in tf.gfile.Open('%s/%s.ndjson' % (data_pathb, name)):\n","    d = convert(line,stroke)\n","    if letter or stroke or d['recognized'] :\n","      yield d\n","\n","def loadn(name, n, unrecognized=False, letter=False, stroke =False):\n","  \"\"\"Returns list of drawings.\n","\n","  Args:\n","    name: Name of the downloaded object (e.g. \"elephant\").\n","    n: Number of drawings to load.\n","    unrecognized: Whether to include drawings that were not recognized\n","        by Google AI (i.e. the hard ones).\n","  \"\"\"\n","  it = loaditer(name, unrecognized=unrecognized, letter=letter, stroke=stroke)\n","  return list(itertools.islice(it, 0, n))\n","\n","def loadALine(name,n,unrecognized=False,letter=False, scaled=False):\n","  count = 0\n","  if(letter): \n","    if(scaled):\n","      data_pathb = data_path+'/handwriting/'\n","    else:\n","      data_pathb = data_path+'/handwriting/no_scale/'\n","  else:\n","    data_pathb = data_path\n","  for line in tf.gfile.Open('%s/%s.ndjson' % (data_pathb, name)):\n","    if(n == count):\n","      d = convert(line)\n","      if unrecognized or d['recognized'] :\n","          return d\n","    else:\n","      count +=1\n","      continue\n","  \n","\n","n = 1\n","print('Loading {} instances of \"{}\"...'.format(n, 'cat'), end='')\n","sample = loadn('cat', 100)\n","print('done.')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Loading 1 instances of \"cat\"...done.\n"],"name":"stdout"}]},{"metadata":{"id":"LVJh4SHVXb-Q","colab_type":"code","colab":{}},"cell_type":"code","source":["letters_list  = loadn('a',30,unrecognized=True,stroke=True) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"bTBfpLgii4G4","colab_type":"code","outputId":"40b4369c-a387-45cd-bf6d-d2baa276788b","executionInfo":{"status":"ok","timestamp":1553073958622,"user_tz":-60,"elapsed":1311,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}},"colab":{"base_uri":"https://localhost:8080/","height":678}},"cell_type":"code","source":["letters_list[20:22]"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'keyid': 'a20_0',\n","  'l_id': 'a20',\n","  'letter': 'a',\n","  'nb_stroke': 1,\n","  'stroke': [array([543, 543, 543, 543, 543, 543, 543, 589, 589, 589, 589, 589, 589,\n","          589, 589, 589, 589, 546, 546, 546, 500, 500, 500, 446, 446, 404,\n","          404, 363, 363, 321, 321, 321, 268, 268, 238, 226, 217, 210, 206,\n","          205, 206, 206, 226, 226, 268, 268, 332, 332, 402, 402, 472, 502,\n","          528, 549, 565, 565, 582, 582, 582, 582, 582, 582, 539, 539, 526,\n","          526, 530, 530, 553, 553, 594, 594, 657, 697, 745, 794, 854]),\n","   array([ 964,  964,  964,  964,  964,  964,  964,  920,  920,  920,  920,\n","           920,  920,  920,  920,  920,  920,  891,  891,  891,  866,  866,\n","           866,  842,  842,  824,  824,  821,  821,  835,  835,  835,  900,\n","           900,  969, 1009, 1051, 1097, 1145, 1189, 1232, 1232, 1304, 1304,\n","          1345, 1345, 1340, 1340, 1290, 1290, 1208, 1157, 1106, 1052, 1000,\n","          1000,  935,  935,  935,  935,  935,  935,  996,  996, 1072, 1115,\n","          1155, 1155, 1221, 1221, 1272, 1272, 1291, 1285, 1269, 1247, 1218])],\n","  'stroke_order': 0},\n"," {'keyid': 'a21_0',\n","  'l_id': 'a21',\n","  'letter': 'a',\n","  'nb_stroke': 1,\n","  'stroke': [array([522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,\n","          522, 522, 480, 480, 480, 438, 438, 438, 392, 392, 392, 346, 346,\n","          346, 300, 300, 274, 274, 254, 254, 242, 242, 240, 240, 246, 246,\n","          246, 246, 297, 297, 338, 338, 338, 399, 399, 438, 438, 466, 466,\n","          490, 490, 505, 505, 505, 505, 505, 505, 487, 487, 476, 474, 477,\n","          477, 498, 498, 539, 539, 596, 596, 664, 664, 739, 780]),\n","   array([ 860,  860,  860,  860,  860,  860,  860,  860,  860,  860,  860,\n","           860,  860,  860,  860,  842,  842,  842,  863,  863,  863,  866,\n","           866,  866,  879,  879,  879,  912,  912,  954,  954, 1013, 1013,\n","          1072, 1072, 1129, 1129, 1180, 1180, 1180, 1180, 1220, 1220, 1208,\n","          1208, 1208, 1144, 1144, 1082, 1082, 1008, 1008,  942,  942,  888,\n","           888,  888,  888,  888,  888,  951,  951, 1033, 1077, 1118, 1118,\n","          1185, 1185, 1225, 1225, 1238, 1238, 1226, 1226, 1185, 1160])],\n","  'stroke_order': 0}]"]},"metadata":{"tags":[]},"execution_count":6}]},{"metadata":{"id":"VQHf3yh3UdpB","colab_type":"text"},"cell_type":"markdown","source":["# Make model and train model to predict the letter for each stroke\n","\n","\n"]},{"metadata":{"id":"EYie9Y1coQuL","colab_type":"text"},"cell_type":"markdown","source":["## create the tf dataset"]},{"metadata":{"id":"6BNxYBy0VW5k","colab_type":"code","colab":{}},"cell_type":"code","source":["# Convert stroke coordinates into normalized relative coordinates,\n","# one single list\n","\n","def dict_to_stroke(d):\n","  norm = lambda x: (x - x.min()) / max(1, (x.max() - x.min()))\n","  xy = np.concatenate([np.array(d['stroke'], dtype=np.float32) for s in d['stroke']], axis=1)\n","  dxy = np.diff(norm(xy))\n","  return dxy\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wBQsKjrLruR1","colab_type":"code","outputId":"fa662761-36b1-401e-81d6-f28183b09ae6","executionInfo":{"status":"ok","timestamp":1552666290747,"user_tz":-60,"elapsed":853,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}},"colab":{"base_uri":"https://localhost:8080/","height":311}},"cell_type":"code","source":["letters_list[23]"],"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'keyid': 'a23_0',\n"," 'l_id': 'a23',\n"," 'letter': 'a',\n"," 'nb_stroke': 1,\n"," 'stroke': [array([820, 859, 859, 859, 859, 859, 859, 859, 886, 886, 886, 845, 845,\n","         785, 743, 695, 640, 583, 523, 467, 417, 374, 344, 325, 317, 322,\n","         336, 362, 362, 434, 478, 525, 573, 619, 662, 662, 731, 731, 771,\n","         771, 783, 783, 783, 783, 783, 783, 752, 752, 758, 758, 781, 781,\n","         816, 816, 816, 854, 854, 854]),\n","  array([ 879,  868,  868,  868,  868,  868,  868,  868,  826,  826,  826,\n","          794,  794,  773,  766,  766,  765,  776,  788,  813,  842,  876,\n","          917,  965, 1012, 1059, 1103, 1142, 1142, 1205, 1223, 1231, 1231,\n","         1220, 1204, 1204, 1157, 1157, 1099, 1099, 1054, 1054, 1054, 1054,\n","         1054, 1054, 1096, 1096, 1155, 1155, 1216, 1216, 1264, 1264, 1264,\n","         1306, 1306, 1306])],\n"," 'stroke_order': 0}"]},"metadata":{"tags":[]},"execution_count":81}]},{"metadata":{"id":"rt2fVbQfoWwi","colab_type":"code","outputId":"880c2669-5e0f-407d-ad9d-f5bbade96c68","executionInfo":{"status":"ok","timestamp":1552902166821,"user_tz":-60,"elapsed":1138,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}},"colab":{"base_uri":"https://localhost:8080/","height":433}},"cell_type":"code","source":["# Visualize / control output of dict_to_stroke().\n","\n","stroke = dict_to_stroke(letters_list[20])\n","\n","# First 2 dimensions are normalized dx/dy coordinates\n","# third dimension indicates \"new stroke\".\n","xy = stroke.cumsum(axis=1)\n","pyplot.plot(xy[0,:], -xy[1,:])\n","pxy = xy[:]\n","# Indicate \"point captured\" with a red circle.\n","pyplot.plot(pxy[0], -pxy[1], 'ro');"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjkAAAGgCAYAAABIanZ7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3XlYVGUbBvB7ZthENlEBUQgRFRXc\nwQ3cslSo3OrLNXczt5SStMXMFk3LXTM100yzsrRcMpfMXFBwx33FDUEBZRUGZub7Y+QAsg0wZ87M\ncP+uay7fc857Zp5Mhue8q0yj0WhAREREZGbkUgdAREREJAYmOURERGSWmOQQERGRWWKSQ0RERGaJ\nSQ4RERGZJSY5REREZJaY5BAREZFZYpJDREREZolJDhEREZklJjlERERklpjkEBERkVmykDoAfVOr\n1YiNjYW9vT1kMpnU4RAREZEONBoNUlNT4e7uDrlcP20wZpfkxMbGwsPDQ+owiIiIqBzu3LmDOnXq\n6OW9zC7Jsbe3B6D9S3JwcJA4GiIiItJFSkoKPDw8hN/j+mB2SU5uF5WDgwOTHCIiIhOjz6EmHHhM\nREREZolJDhEREZklJjlERERklpjkEBERkVlikkNERERmiUkOERERmSUmOURERGSWmOQQERGRWWKS\nQ+YtLQ3o0wdo2lT7Z1qa1BEREZGBmN2Kx0SCwEAgKirvODoasLcHAgKAyEjp4iIiIoNgSw6Zp2cT\nnPyiorTXxcCWIyIio8GWHDI/aWnFJzi5oqK09ezs9Pe5bDkiIjIqbMkh8zNkiE7VYl9+FaduP0JS\nuhIajaZinylVyxERERWLLTlkVuKSM5FzPBp1dKj7+Nwl9Fl+RKf39XS2xXPVbeHpbJuvXBWe1W1h\nl50pTcsRERGViEkOmbxTtx9h+u/RuBSXCgBYYVMDdXC91PtuO7np/Bm3kzJwOymjyGsrfvsUPXR5\nkyFDgC1bdP5MIiKqGCY5ZHI0Gg22nr6H9zZHQ6lSF7o+OXQKLi7qDwCQlfA+PU7txQ3bqkhIy8Kt\npAzcStQmMneSMnArMR23kzKQkKYsNR7Px3G6BX699MSLiIj0h0kOmYTMbBWW7b+GJf9cK7aOk60l\n5vZrihebuAFHvi65CykgALCzgxyAi4MNXBxsEODlXKaYclRq3E/ORJUTjYG9t0qtv+uJLR5ExGBI\n2+cgk5WUfhERkT7INBUecWlcUlJS4OjoiOTkZDg4OEgdDuVKSgI6dQJiYwF3d+DAAcC55KQiLjkT\ns7afx87o4ltKWj1XDZ/38YOvWxH/r4sbDKzv2U5padpZVMXI/QFr9PYmZNpox+T4uNhh7fAA1Klm\nq784iIhMmBi/v9mSQ+JzcwPi4/OOk5KA6tUBV1cgrmAC8+z4mqK81qoOpvX0RXU765I/NzJSm4AM\nGaLtKqpXD1i/Xv+Df+3stIlTCS1H8Q39hQQHAK49SEPQl/sBANN6+uLNjt5s3SEi0jO25JC4nk1w\nnqFxdcUff51A+OazRY6vyfVeD1+MDKoLKwsjXvVAh5aj24kZGPp9JG4mpBeqVtupCtaPDIR3Tc7A\nIqLKR4zf30xySDy5LTbFyP2H5z/+R6TZORW4Vs3WEl/mjq8xJTq2HGk0Gnx/OAaztl8o8m0mdfXB\n5G4NIJezdYeIKgcmOTpgkmNE/P2Bc+dKrXaxuid6jlpe8vgaM3Y/+QlGrj2OC/dTCl1zsrXET6Pb\nolGtyvV3QkSVD5McHTDJMSLVq2tbc0qhruYMeVKiAQIyfpsib2Pa79FFXhsVVBfTevrCQvFMl50h\nxh0REYmMSY4OmOQYER1bcuDnp93niQQPU7MwbsMJRMU8KnTNSiHHL2PbobmHk+FmkBERiYxJjg6Y\n5BiRpCRono7JKXFkSWJiqdPJK7M/Tt/D25tOFzq/Zd0UNI+7CqCYv18mOkRkQsT4/W3EU1XI1Gmq\nVUO8rXZAcbGZtKsrE5xS9GpeGzFzQnFmxovo2KAmAMAmM63kBAfI2y+LiKiSYpJDomny8d9oO/FH\nIdEppIh1cqh4jraW+GFEIGLmhOLA2e8hQyktZIDOO7ITEZkjJjkkikGrjyJDqQIADP50K2SJidqx\nN87O2j8TE5ngVIBrQqxO9TIvXxE5EiIi42WQJGfZsmXw8vKCjY0N2rRpg8gSxgmcP38e/fr1g5eX\nF2QyGRYuXGiIEEmPZu+8iMPX8mZL7Q3rpE1uoqO1yU10NLuoKqpePZ2q/ZttD69pO7B431WY2fA7\nIqJSiZ7k/PzzzwgLC8PHH3+MkydPolmzZujevTsePHhQZP2MjAx4e3tjzpw5cHMzsYXgCJtP3MW3\n/90Qjq9/ESJhNGZs/foSL2ueviaHTgEAzN9zBXWn70TXr/7FvcdPxI+PiMgIiJ7kzJ8/H6NHj8bw\n4cPRuHFjrFixAra2tlizZk2R9QMCAjBv3jz0798f1tal7E1ERiUqJgnv/npGOD73SXcouGKvOHL3\nyyqGDIAsIACzBrcvcP5GQjo6zPkHXtN24Oeo2yIHSUQkLVGTHKVSiRMnTqBbt255HyiXo1u3boiI\niNDLZ2RlZSElJaXAiwzvTlIGXluR9//00HtdYGfN/V9FFRlZfKLzdPr4/1p7IGZOKI5M6wofl4IL\nBL73WzS8pu1A/5UReJyhNEDARESGJWqSk5CQAJVKBVdX1wLnXV1dEaenQaezZ8+Go6Oj8PLw8NDL\n+5LuUjOzETx3v3D821vtUaearYQRVSKRkUBqKtC7t3bxxd69tcfPjHtzd6qCvWGdcHN2CN59sUGB\na0dvJKH5rD3wmrYD+y4Wv5kqEZGpMflH7enTpyMsLEw4TklJYaJjQDkqNfxn7haOF/VvjlbPVZMw\nokrIzg7YskWnqjKZDBO61seErvVxKS4Fr30TgdSsHOH6yHXHAQC9mrvjy35NYWOpECVkIiJDEDXJ\nqVGjBhQKBeLjCz4dxsfH621QsbW1NcfuSMjng7+E8oQuPujVvLaE0VBZ+Lo5IPqT7shWqTFr2wWs\nP3pLuPbH6Vj8cVo7TX3LuPZo4cnElYhMj6jdVVZWVmjVqhX27dsnnFOr1di3bx/atWsn5keTAXTM\n10XVpWFNvNu9oYTRUHlZKuT4tLcfYuaEYtOYtoWu91l+BF7TduCLnRehUnMaOhGZDtG7q8LCwjB0\n6FC0bt0agYGBWLhwIdLT0zF8+HAAwBtvvIHatWtj9uzZALSDlS9cuCCU7927h9OnT8POzg4+Pj5i\nh0s6mvTTKdxOygAAOFaxxPfDAyWOiPShrXd1xMwJRXpWDqb8fBq7L+S1wq787wZW/ncDNe2t8fOY\ntvCuyZ3Oici4GWSDzqVLl2LevHmIi4tD8+bNsXjxYrRp0wYA0LlzZ3h5eWHt2rUAgJiYGNStW7fQ\ne3Tq1An//vtvqZ/FDTrFt+LAdcz565JwfHN2CGQyThU3VzvO3sf4jSeLvPZhaCOMDKpb9P//pCSg\nUycgNhZwdwcOHOAikERULO5CrgMmOeL6+3wc3lx/Qji+8llPWFlwd5DKICEtCyPXHceZO48LXfOr\n7YA1wwLgYm+jPeHmBsQXMVOL+5URUTGY5OiASY54zscmI3TxIeH45EcvwLmqlYQRkRQ0Gg3WHYnB\nzG0Xirx+cfVwVEl8WPwbMNEhoiKI8fubj+CkkwcpmQUSnL1hHZngVFIymQzDOtRFzJxQ/PtuZ9Ry\ntBGu2aU9hk3iQ5T45BQfr+3KIiISmcmvk0Piy8xWIfCLvBly60cGwsfFXsKIyFh41aiKiOnPQ6XW\n4Kvdl/HK4O7QaXRWp07ajVqJiETEJIdKpNFo4PvRLuH4015NEFy/poQRkTFSyGV4r4cvoEnT7YbY\nWHEDIiICu6uoFN7v7xTKA9t4Ykg7L+mCIePn7q5TNaWLa+mViIgqiEkOFavfN0eQOyzdr7YDvujj\nL21AZPwOHCjxsubpq+XzH8Br2g7cfZRhkLCIqHJikkNFmvnneZy49Ug43j4xWMJoyGQ4O2tnTxUh\ndzByvK0T0uycAABBX+5H3elMdohIHExyqJCNx25j7ZEY4fjGFyHSBUOmJy6uyERHBkDm6ooaKYkI\n9a8lnNdotMlOvfd34t7jJwYMlIjMHdfJoQKOXEvAwNXHhOMLs7rD1orj06kcSlnxOEelxsSfTuGv\ncwXXzLFUyHBgahe4O1UxdMREJCEuBqgDJjnldzMhHV2++lc4Pjr9ebjlWwOFSAw5KjUmbDyFXecL\nJjtWFnIcmNoZtRyZ7BBVBkxydMAkp3ySM7LRbNZu4fjPCR3QtI6ThBFRZZOtUmPCxpP4+3zB7SCs\nLeQ4MLULE24iM8ckRwdMcsouW6VG/Q/+Eo6XDWyJ0Ka1SriDSDzZKjXGbTiJPRcKJjtVLBXY/25n\nJjtEZopJjg6Y5JSNRqNB3el5a+GEvdAAk56vL2FERFrZKjXe+vEE9l58UOC8rZU22XF1YLJDZE6Y\n5OiASU7ZBH6+Fw9SswAAPf3c8M3gVhJHRFSQMkeNsT+ewD+XCiY7dtYW+OedTnBhskNkFrhBJ+nV\nmB+OCwmOm4MNExwySlYWcqwZFoArn/VEl4Z5W4qkZeUg8It98J/5Nx6kZBa+MSkJ8PcHqlfX/slN\nQYkqHbbkVFKL9l7Fgr1XhOObs0Mgk+m0tSKRpJQ5aoz+4TgOXHlY4LxjFUvsCesIF3sbwM1Nu9v5\ns1xdtev4EJHRYUsO6cX2s7EFEpyrn/dkgkMmw8pCjnUjAnH5sx7o2CCvZSf5STYCP9+HB/bVoCkq\nwQG0iY+bm4EiJSKpMcmpZM7ceYwJG0/lHc94EZYK/jMg02NtocAPT5Od4Po1AAB2aY9RM+1xyTfG\nx7PriqiS4FK2lcj95CfoteywcLz/3c5wtLWUMCKiirO2UGD9yDbIzFbhgVcD6NQm2akTEB0tdmhE\nJDE+wlcSGcoctJv9j3D80+i2qFujqoQREemXjaUCnpmltOLkio0VNxgiMgpsyTFXaWnAkCHA9etQ\n1/VGy7oDABs7AMCcvv5oV6+6xAESicDdXbeuKHd38WMhIskxyTFHgYFAVJRwKI+OxkX8gdNu9bFt\n5Vb0D/SUMDgiER04oJ0yXozcqaThby/EXI2GA+6JzBy7q8zNMwlOfs3jrmLGp8MMGg6RQTk7a6eJ\nFyE3wYm3dcKv1zJRd/pOHL2RaLjYiMjguE6OOUlLA+ztS6+XmgrY2YkfD5FUilknR+XqinrDvitw\nroadFQ691xU2lgpDRUdEReA6OVSyIUP0W4/IVMXFAYmJgJ+ftnXHzw9ITIQiLg4xc0KxIt/q3glp\nSvh+tAurD96QMGAiEgNbcsxJ06a6TYv19wfOnhU/HiIjplZr0H/VUUTeLDhQ+WB4F3g420oUFVHl\nxZYcKlm9evqtR2TG5HIZfnmzHfaGdSpwPnjufoxadxxm9vxHVCmxJcecPB2TowFKXhCNY3KIClmw\n5woW7bta4Nz6kYEIrl+zmDuISJ/YkkMls7NDetMWAPJmkhQSEMAEh6gIU15ogOiZL8JSkfeIMOS7\nSDSesQsZyhwJIyOi8mKSY2aa9PwUp93qF30xIACIjDRsQEQmxN7GElc/D8H3wwKEcxlKFRrP+BvL\n9l+TMDIiKg8mOWbkVmI6AKDP0AX4fONRoHdv7SDj3r21XVRMcIh00sXXBTdnh6Bzw7yuqnl/X4bX\ntB24mZAuYWREVBYck2NGGnzwF5QqNQDgxhchkMu5mitRRd1KTEenef8WOBfkUwM/jAjkzxiRHnFM\nDhUrMS1LSHBebOzKL18iPXmuelXEzAnFez18hXOHriXA+/2d2Huh8IKDRGQ8mOSYib7fHBHKSwa2\nkDASIvP0Vud6uDCrOxxs8rb8G/XDcXhN24GUzOy8iocOATJZ3uvQIQmiJSKASY5ZyFDm4FZiBgDA\nr7YDrC24PD2RGGytLHB2ZndsGNWmwPmmM3dj/u7L2qQmOLjgTcHB2vNEZHBMcszAyLXHhfLG0W0l\njISocujgUwM3Z4cgxN9NOPd2d19oUMLyDUx0iAyOSY6Jy1GpEfF0J2XnqlZwsLGUOCKiykEmk2H5\noFY4PK0rfK+eE75MS0xl2HVFZFBMckxc+G95e1DtnBRcQk0iEkNtpyrY9fs0yFBKggMU7soiIlEx\nyTFhGo0Gv5+8Jxy7OdpIGA0REZFxYZJjwubvuSKUd0/pKGEkRJWbSuoAiKhITHJM2JJ/8paZb+Bq\nL2EkRJVXfEomQvvOKXnQca6DBw0QERHlsii9ChmjjcduC+Wfx3BGFZEUzt1LxktLDgH1/aCGDk+N\nQUEGiIqIcrElx0S9vyVaKLfxri5hJESV065z97UJzlM/RcSUPPDYvHbQITIJbMkxQfmXkl82sKWE\nkRBVTsv2X8O8vy/DLe4u9q8fD2u1CvL5lsDVq0BcXMFZVAcPsgWHSCJMckzQqB/yFv8LbVpLwkiI\nKp/xG05iR/R9XPvyJSiQb9p4djZQv7520T+22hAZBSY5Jubk7UdC+aOXGksYCVHl0372PsQmZwoJ\nTpE0GkAuB9RqQ4ZGREXgmBwT03d53kacI4PqShgJUeWRo1LDa9oOxCZnwi3urpDgFDsGR6MBrl0r\n7ioRGQiTHBNy42GaUB7FBIfIIJKfZMPng7+E43/Xj9dtdePGbGklkhqTHBPy/PwDQvmD0EYSRkJU\nOcQkpKPZJ7uF4xcau8JGrePSf9nZIkVFRLpikmMiHqZmCWMZQ/zdIOOOxkSiirieiM5f/SscT+5W\nH6veaA1Y6rgJrq71iEg0THJMRO9lh4XywtdbSBgJkfnbFHkbA1YdFY6XDmyByd0aAAByos/ptrrx\nhQuixUdEuuHsKhOQnpWDe4+fAACaezjByoK5KZFYZm27gDWHbwrHf4zvgGYeTsJx4/XXcQGAAtpE\np8g2VZkM8PEROVIiKg1/W5qAYd9HCuX1IwMljITIvL224kiBBCdietcCCc7cXZegzFHD573txW/K\nKZNx+jiRkWCSY+SyVWpExWjXxnGxt4a9Dfv5ifRNo9Gg7vQdws8aAFyY1R21HKsIx2fuPMbyf68L\nxz7vbUe7oSuQrXj6M2n5dMVjJjhERoNJjpF799czQnn7RC4NT6Rvmdkq1J2+s8AixTe+CIGtlUWB\nOr3yjYub0EXbFRXnVgfqzCfadXGUSnZRERkZJjlGTKPR4I/TscKxi4ONhNEQmZ8HqZnw/WiXcNzE\n3QExc0IhlxccaZO/zroRgVi6P2+hP2uLYtc+JiKJMckxYl/uuiyU94Z1kjASIvNzPjYZgZ/vE44H\nBHpix6TgQvXyt6b2aVEbnRrUFI7bejuLGyQRVQhnVxmxFQfy9f+72EkYCZF5+ft8HN5cf0I4/uSV\nJhja3qtQvUNXE7D5xF3heMHrzXElPlU4/jCUqxoTGTMmOUbqh4gYobx5bDvJ4iAyN9/8ex1f7rok\nHP8wIhAd87XO5Ep+ko3B3x0Tji/O6gEA+HzHReGcX21HESMloopikmOkZvxxXii39mKTOJE+TPrp\nFP48kzfObW9YR/i42BdZN/92DlvGtUcVK+3YmwNXHoobJBHpDZMcI7Tr3H2hvGJwKwkjITIfwXP/\nwZ2kJ8LxyY9egHNVqyLrDsnXgvNmR2+08KwGQLsbea53X2wgUqREpC9McozQ2B9PCuUefm4SRkJk\ngi5fBpo0AVQqQKFAztlo+Pxwo0CVK5/1LHbl8O1nY3HwagIA7bp+00PyNsP9KfK2UB4V7C1C8ESk\nTwaZXbVs2TJ4eXnBxsYGbdq0QWRkZIn1f/31V/j6+sLGxgb+/v7YuXOnIcI0CsdjkoTyJ680kTAS\nIhMkkwG+vtoEBwBUKiiaNMb1L18CADjZWuLm7JBiE5wHKZmYsPGUcHzls54Frn+yLW8/KhtLTh0n\nMnaiJzk///wzwsLC8PHHH+PkyZNo1qwZunfvjgcPHhRZ/8iRIxgwYABGjhyJU6dOoXfv3ujduzfO\nnTsndqhG4dUVEUK5qNkeRFQMWZG7SAHQftFd//IlnJ7xImTF1NNoNAj8Im9K+Z4pHWGpKPgVmaPW\nrhjYPN9WD0RkvERPcubPn4/Ro0dj+PDhaNy4MVasWAFbW1usWbOmyPqLFi1Cjx49MHXqVDRq1Aif\nfvopWrZsiaVLl4odqnSUSmDhQjwe+SZGRG2FRY4SYzvVkzoqItNx+XKxl3JTGkUp9bov/E8ofxDS\nCPVdCw5IvpmQLpRnvMyp40SmQNQxOUqlEidOnMD06dOFc3K5HN26dUNERESR90RERCAsLKzAue7d\nu2Pr1q1F1s/KykJWVpZwnJKSoofIDSg8HJg/H1Cp4ARgBoAP9q+BXBYG9JwndXREpqFJyV27QttN\nkyZATk6h6+sjYnAlPg0A4O5og9EdC4+3mb0zb+p4y6cDkYnIuInakpOQkACVSgVXV9cC511dXREX\nF1fkPXFxcWWqP3v2bDg6OgovDw8P/QRvCOHhwLx5eeMHnpJr1JB99ZX2OhGVTlXsnuCl1otJSMdH\n+ZZsOPRe1yJv3X0hvlyhEZF0TH5bh+nTpyM5OVl43blzR+qQdKNUaltwiiA8dc6fr61HRCVT6DgI\n+Jl6KrUGnb/6Vzg+PK1roX2rcuvlyt2ck4iMn6hJTo0aNaBQKBAfX/AJKD4+Hm5uRU+NdnNzK1N9\na2trODg4FHiZhOXLS3/6VKm09YioZOfPl3hZ8/SVfTa6wPnms/IW/PvqtWao7VSlyPt/y7e1w9jO\nHC9HZCpETXKsrKzQqlUr7NuXN2NBrVZj3759aNeu6K0K2rVrV6A+AOzZs6fY+ibr+vXS65SlHlFl\n1rBhsZdy22DUAAYceIT7ydoFARfuvYLUTO34nJaeTni1VZ1i3+OTbXlJlJ01lxcjMhWi/7SGhYVh\n6NChaN26NQIDA7Fw4UKkp6dj+PDhAIA33ngDtWvXxuzZswEAb7/9Njp16oSvv/4aoaGh2LRpE44f\nP46VK1eKHaph1dPxaVDXekSVnUZT5DRyGQAVgOYzdiH11iOELj6EUcF1sXDvVaHOb2+1L/Gt05Xa\nVtdGtUykpZiIABhgTM7rr7+Or776CjNmzEDz5s1x+vRp7Nq1SxhcfPv2bdy/n7eNQfv27bFx40as\nXLkSzZo1w+bNm7F161b4+fmJHaphjRsHKBTQlFRHodDWIyLdaDTApUt5Y28UCuDSJSg0GmyfFAS/\n2g5ISldi7q68qeQnP3qh2LVzAODuowyhPOMlTh0nMiUyjUZT4u9ZU5OSkgJHR0ckJycb//ic8HBo\n5mmniRf5FTt1KjB3rkFDIjJnmdkq+H60q8C5Y+8/D1cHm2Lvyb+pZ8ycUFHjI6rMxPj9bfKzq0za\n3Ln4NrAv1LJn/jcoFExwiEQwa/uFQudCFh3Eoad7VRUl/67lRGRamORIKDNbhTldRqBh2GYcGDsd\nmDABWLAAyMhggkOkZxHXE7HxWN4Gm/vf7YxGtRyQmK7EkDXHMH/PlQJTxQFAne94dHBdg8VKRPrB\naQISWrD3CgAgx8IK7ZZ8BhSzaSARVUxqZjYGrDoqHJ//pDuqWltgy7j2+GTbBfwUeRuL913F8Zgk\nLOzfHC722u6rbWfzWnEmdK1v8LiJqGL4W1VC3x64IZSL2xWZiCrOf2beeji/jm2Hqk+ngdtYKjC7\nrz8W9W8OWysFjlxPRMiiQzhyXdt9lX/XcccqloYNmogqjL9ZJaLMUQvlMUXsk0NE+jFq3XGhPKy9\nFwK8nAvV6dW8Nv6cEISGrvZISMvC4NXHsHjfVSSla1cc965R1WDxEpH+MMmRyIoDeYv8TenWQMJI\niMzXrnNx2HsxbwX1ma8Uv5Gnj4sdto7vgNdbe0CtAebvuSJc467jRKaJSY5E8n+BVrHScd8dItJZ\nQloWxv54Qji+8lnPUu+pYqXAl682xdevNSt43pI/o0SmiEmOBPLP4BgQ6ClhJETmSaPRoPVne4Xj\nXZODyzTurd8zWzwMWHUUy/ZfKzDbioiMH5McCaw9EiOUp4f4ShcIkZl6ZelhoTy1e0P4upVtYbFn\n10hVa4B5f1/G8LVRwjgdIjJ+THIk8Gm+BckcbDhjg6jC0tKAPn2Apk1xp9OLuHr9HgCgelUrjO/i\nU+a3+/t83jieEx92w9xXm8LaQo4DVx4idPFBHI9J0lvoRCQerpNjYPmfEHs1d5cwEiIzERgIREUJ\nhx6IxsX/9uC0W300u3e5hBuLNyvfruPV7azxv9YeaFrHEeM2nMSNh+l4feVRTO3eEGOCvSGXF7/v\nFRFJiy05BvbL8TtCmZv9EVXQMwlOfs3jrkLetk3Z3u9pi9Dq+SOx4rdPUc9GJVzydXPAtglB6NXc\nHSq1BnP+uoRRPxzHI3ZfERktbtBpYF7TdghlbvZHVAFpaYC9fen1UlMBO7vS6xWRMGkAyAICgMjI\nvHMaDX6KvIOZ285DmaNGbacqWDKwBVp6VivjfwAR5ccNOk1c/nzyeV8XCSMhMgNDhuivXgktQoiK\n0l5/SiaTYWAbT2wd1wF1a1TFvcdP8L8VEVh98EahActEJC0mOQa0/ex9ofxZHz8JIyEyA9evl15H\nl3ppacUmOMJom6gobb18Grs74M8JHfBS01rIUWvw2Y6LGLP+BJIzsnWLi4hExyTHgN7edEoo13Ks\nImEkRGagXj391KtAi5C9jSWWDGiBT3v7wUohx54L8QhdchBn7jzW7T2JSFRMcgwodx2xtt6F984h\nojJav14/9SrYIiSTyTCk7XP4fVx7eDrb4u6jJ3h1xRF8f/gmu6+IJMYkR2xKJbBwIe4MHokRUVth\nkaPEnL5NpY6KyPTZ2QEBAQC0A4SLFBBQ+qBjPbUI+dV2xPZJQejp54ZslQafbLuAcRtOIiWT3VdE\nUuHsKjGFhwPz5wOqvGmoKpkcinffAebOlTAwIvOR0zoAihPHUWi1mmdmRRXr6SwtDVD4PfLTcZaW\nRqPBuiMx+HznRWSrNPB0tsXyQS3hV9ux9FiIKjHOrjIl4eHAvHkFEhwAkGvU2vPh4RIFRmRefv/m\ndzR6exN2+bSBxs8P6N1bm5DokuAA+msRekomk2FYh7rYPLY96lSrgttJGei7/AjWR8Sw+4rIwNiS\nIwalErC1LZTgFKBQABkZgJXkZ89RAAAgAElEQVSV4eIiMkP/+zYCkTe12yxUZO2pU7UaoHnc1fK3\nCBUhOSMb724+gz0XtNtEvNS0Fmb39Yc9t3MhKoQtOaZi+fKSExxAe335csPEQ2TGchOcitBoNOgz\ndAEavb0Jx5t3BPz9y94iVARHW0usHNIKH4Y2goVchu1n7+OVpYdxPja5wjETUemY5IhBX+t3EJHO\n2nlXL/e9uWtYZdrYwX3/LuDsWWDLFp27qEoik8kwKtgbv4xth9pOVXAzIR19lh/BxmO32X1FJDIm\nOWLQ1/odRFQitTovSejXqk6532fiT3lrWLk7ibOGVUvPatgxKQjP+7pAmaPG+1uiMfnn00jPyhHl\n84iISY44xo3TjrkpiUKhrUdE5Xb81iOh3MPPrVzvkb81pWODmhWOqSROtlZY9UZrTO/pC4Vchj9O\nx+LlpYdwKS5F1M8lqqyY5IjBygoICwNQwmyNsDAOOiaqoN9O3BXKdtYW5XqP/NutzOnrX+GYSiOX\ny/Bmp3r4eUxbuDnY4MbDdPRaehi/RN1h9xWRnjHJEcvcucDUqVDLnvkrViiAqVO5Tg6RHvx28m7p\nlUphiK6qorT2csbOt4PRqUFNZOWoEf7bWbzz6xlkKNl9RaQv5Xv0Id3MnYuG6nZ449ROdLdJR5sX\nArVdVGzBIdKLnKdjctwcbMp1vyG7qoriXNUK3w8LwDcHruPr3Zfx+8l7iL6bjOWDWqK+q73B4yEy\nN2zJEdH52GTkWFhhTUBv1NnwHTB5MhMcIhH0a1W7XPdtM3BXVVHkchnGd/HBT6PbwsXeGlcfpOGV\npYcLdMURUfkwyRHRtwduCOXaBmwGJ6oM4pIzhXLfluWbWTVJoq6qorTxro6dbwcjuH4NPMlW4Z1f\nzyB88xk8UZay5hYRFYtJjoj+PBMrdQhEZmvr6XtCuV7Nsq9nI3VXVVFq2Flj3fBAvPNCA8hlwC/H\n76L3ssO49iBN6tCITBKTHAPo6usidQhEZqei3TnG0FVVFLlchonP18ePo9qghp01Lsen4pWlh/BH\nvqSOiHTDJEckiWlZQnlsJy76R6RvVyvYumFMXVVFaV+vBna+HYR23tWRoVTh7U2nMf33s8jMZvcV\nka6Y5IhkXcQtoRzgVU3CSIjMW4h/2RcBNMauqqK42Nvgx1FtMOn5+pDJgJ8i76DP8iO48ZDdV0S6\nYJIjkhUH8valkskK7WtMRBWgzFEL5X7lGHRsrF1VRVHIZQh7oQHWj2iDGnZWuHg/BS8vOYRtHPNH\nVComOSLJ/RL2rlFV4kiIzM/+yw+EcnlaYoy9q6ooQfVrYMekYLSp64x0pQoTfzqFD7dGs/uKqARM\nckSQrcp7yuR4HCL9yz/o2FJRtq8xU+mqKoqrgw02jGqDCV18AAA/Hr2Nft8cwa3EdIkjIzJOTHJE\nkL8ZuVcLdwkjITJPuy/El/teU+qqKoqFQo53uzfEuhGBcK5qhfOxKXhp8SH8FX2/9JuJKhkmOSLI\nPx7H2qKU3ciJqNwa1XIo8z2m2FVVlE4NamLHpCAEeFVDalYO3tpwEjP/PI+sHHZfEeVikiOCK/Ha\nmQ9yjjcmElW/lmXbzsGUu6qKUsuxCjaObit0i689EoP/rYjAnaQMiSMjMg5MckT0JsfjEOnd5bhU\nodyredmSnPyrkJtiV1VRLBVyTOvpizXDWsPJ1hJn7iYjdPFB/H0+TurQiCTHJEfPTtx6JJSHt/eS\nLhAiM/X7ybxBxzXtrct079ubTgtlU+6qKkpXX1fsmBSMlp5OSMnMwZvrT+DT7RcKTLcnqmyY5OjZ\nt/nG47g42EgYCZF5+u1k+bZzMLeuqqLUdqqCn99sh9HBdQEA3x26if99G4G7j9h9RZUTkxw9q8is\nDyIqXUKaEgBgY1m2ry9z7KoqiqVCjg9CG2PVG63hYGOB03ceI3TxIey7yO8mqnyY5OiLUgksXIiZ\ne1ZgRNRWvNTIWeqIiMxaWVc6NueuqqK80FjbfdXMwwnJT7Ixct1xzN55scA6XkTmzkLqAMxCeDgw\nfz6gUmHY01Oaf9cA598B5s6VMjIis5KSmS2U+7XSMclRKqFZtgwz9/yD205uuPH6UJGiMz4ezrb4\n9c12mP3XRXx/OAbf/ncDx289wpIBLSpFokfEJKeiwsOBefMKnZap1XnnmegQ6cXOfAv5tfBwKv2G\npw8gsmcfQK5VngcQKws5Pn65CdrUdcbUzWdx4tYjhC4+iPmvN0eXhi5Sh0ckKnZXVYRSqW3BKcn8\n+dp6RFRh+Qcdl7rxbe4DiKrg4njCA0h4uBghGq0efrWwY2Iw/Gs74lFGNoZ/H4Uvd11CDruvyIwx\nyamI5csLfYEWolJp6xFRhUXFPCq9EsAHkGJ4VrfF5rfa4Y12zwEAvvn3OgauOoa45EyJIyMSB5Oc\nirh+vfQ6ZalHRDrp4FO95Ap8ACmWtYUCs3r5YenAFrCztkBkTBJCFx/Ef1ceSh0akd4xyamIejqu\naKxrPSIqllqdt85NqTOr+ABSqpeaumPbxCA0ruWAxHQlhn4fifm7L0OV7++ZyNQxyamIceMARSkb\ncCoU2npEVCGRMUlCuXsTt5Ir8wFEJ3VrVMXv49pjYBtPaDTA4n+uYdDqo3iQwu4rMg9McirCygoI\nCwMAFPvsExamrUdEFZJ/O4eq1qVMDH36AFJimwQfQAAANpYKfNHHH4v6N0dVKwWO3khCyOJDOHIt\nQerQiCqMSU5FzZ0LTJ0KteyZv0qFApg6tdJMUyUS228n7+le2coKOZOnAOADiK56Na+NPycGwdfN\nHglpWRj03TEs3HuF3Vdk0pjk6MPcuWgYthmzuo7Crs6vAgsWABkZTHCI9Cj3l627o257wn3Qdgi+\nDezLB5AyqFfTDlvHd0D/AA9oNMDCvVcxdE0kHqZmSR0aUblwMUA9ybGwwpqA3qjbqwnQzkvqcIjM\nlq4rHf98/A7QZQS+Ch6Ma3VuaQcZ16un7aJiC06xbCwVmNOvKQLrOuODLedw6FoCQhYfxJIBLdDW\nu5RZbURGhkmOHtxMSBfKpQ6IJKIyu5/8RCj31WHPqj35Nsr9YWww4NNHlLjMWd+WdeBf2xHjNpzE\n1QdpGLjqKMJeaIBxnX0gl5eyECORkWB3lR7sjM5bat7FQbemdCLSkVKJ6x98Jmx+W9fBstRbRv9w\nXCi396khZnRmrb6rPf6Y0AH9WtaBWgN8tfsKhq2NQmIau6/INDDJ0YP8SQ4R6VF4OGBri6BlX2DY\nye2Y8c9qwNa2xC0Z8k9/Hh1c1xBRmjVbKwt8/b9mmPdqU9hYyvHflYcIXXwIUfmm9BMZKyY5enA+\nNkXqEIjMTzF7T0GlKnHvqTfWRArlaT0biRlhpfJaaw/8MT4I9WpWRVxKJvqvPIpv/r1eYJFGImPD\nJEePWj9XTeoQiMxDOfeeUqs1uBSXCgB4rrotFBw7olcN3ezx54Qg9G7uDpVagy93XcLIdVF4lF65\n9gAj08EkR496+teSOgQi81DOvacW7r0ilDeObitGZJVeVWsLLHi9Oeb09Ye1hRz7Lz9E6OKDOHFL\nx81TiQyISU4F3UnKEMo9/Tizikgvyrn31OJ/rgnl2k5V9BkR5SOTydA/0BNbx3dA3RpVEZucide/\njcCq/25Ao2H3FRkP0ZKcpKQkDBo0CA4ODnBycsLIkSORlpZW4j0rV65E586d4eDgAJlMhsePH4sV\nnt78dS5v0LE7v1SJ9KMce0/lb0lYMqCFviOiIjSq5YBtE4PwcjN35Kg1+HznRYz+4QSSM7KlDo0I\ngIhJzqBBg3D+/Hns2bMH27dvx3///YcxY8aUeE9GRgZ69OiB999/X6yw9G5ndJzUIRCZn3Jsftvv\nmyNC+eVm7mJFRs+ws7bA4v7N8VlvP1gp5Nh7MR4hiw/i9B3jf0gl8ydKknPx4kXs2rULq1evRps2\nbRAUFIQlS5Zg06ZNiI2NLfa+yZMnY9q0aWjbVve+9KysLKSkpBR4GRJ/kIlEUMbNb1Mz81oOXmGC\nY3AymQyD2z6H38e1x3PVbXHv8RO8tuIIvjt0k91XJClRkpyIiAg4OTmhdevWwrlu3bpBLpfj2LFj\nev2s2bNnw9HRUXh5eHjo9f111ayOoySfS2S2nm5+C3npe0+N33gq77ZXmxoqQnqGX21HbJsYhBB/\nN2SrNPh0+wWM/fEEkp+w+4qkIUqSExcXBxcXlwLnLCws4OzsjLg4/XbvTJ8+HcnJycLrzp07en1/\nXYVwZhWR/s2di6Pn7mJW11FY2/KlYje//e/KQwCAjaUcNpaldHORqBxsLLFsYEt88koTWCpk+Pt8\nPF5achBn77LVmwyvTEnOtGnTIJPJSnxdunRJrFiLZG1tDQcHhwIvQ8m/nw6THCKRWGk3v535wlhg\n8uRCm2uuP3pLKP8xPsjQ0VERZDIZhrb3wm9vtYeHcxXcSXqCV7+JwA8RMey+IoMq0wad77zzDoYN\nG1ZiHW9vb7i5ueHBgwcFzufk5CApKQlubuYzzXrXubxWKQ9nWwkjIaq8Ptp6Tig3dLOXMBJ6VtM6\nTtg+MRjhm8/g7/PxmPHHeRy7kYTZ/fzhYFP6HmREFVWmJKdmzZqoWbNmqfXatWuHx48f48SJE2jV\nqhUA4J9//oFarUabNm3KF6kR+oszq4gkde1B3rIUH73UWMJIqDiOVSyxYnArrDkcg9k7L2JH9H2c\ni03GsoEt4VebYxlJXKKMyWnUqBF69OiB0aNHIzIyEocPH8aECRPQv39/uLtrZz7cu3cPvr6+iIzM\n22cmLi4Op0+fxrVr2gW9oqOjcfr0aSQlGedGcJHcoI5IUvmnjY/o4CVdIFQimUyGkUF18evYdqjt\nVAW3EjPQ95sj+PHoLXZfkahEWydnw4YN8PX1xfPPP4+QkBAEBQVh5cqVwvXs7GxcvnwZGRl5Kwav\nWLECLVq0wOjRowEAHTt2RIsWLfDnn3+KFaZeNHE33DggItJS5qiFWTtt6jpDJuM+VcauhWc17JgU\nhG6NXKDMUePDrefw9qbTSMvKkTo0MlMyjZml0SkpKXB0dERycrJ4g5CVSmD5cqxdvw+3ndxQM3wK\n3urOpnIiMURcT8SAVUcBADFzQoXzU389g19P3AUAnJnxIhxtOcbDVGg0Gqw6eANf7roMlVoD7xpV\nsWxQSzSqxQfGykyM39/cu6qswsMBW1tgyhQMO7kdM/5ZjbEh/trzRGQwuQkOACY4JkYmk2FMx3r4\n5c22qOVogxsJ6ei97DA2Rd5m9xXpFZOcsggPB+bNK7Q7skyt1p5nokNkEPlnNm4aw93GTVWr55yx\nY1IwOjesiawcNab9Ho2wX84gnd1XpCdMcnSlVALz55dcZ/58bT0iEtXYH08I5bbe1SWMhCrKuaoV\n1gwNQHiPhlDIZdhy6h5eWXoIl+NSpQ6NzACTHF0tX16oBacQlUpbj4hEE5+SKZTf7OQtYSSkL3K5\nDOM6++Cn0W3h6mCN6w/T0WvZIfx6XJoV7Ml8MMnR1fXr+q1HROUy5Lu8/e/Cu/tKGAnpW2BdZ+yc\nFIzg+jWQma3G1M1n8e6vZ/BEWcoDJlExmOToql49/dYjIp1Z5CgxImor1OMnIGj7j7DIUaJujapQ\nyDlt3NxUt7PGuuGBePfFBpDLgM0n7qLXskO49oDdV1R2nEKuK6VSO6uqpC4rhUK7eeAze+sQUfnd\nGzMRbquXQ6FRC+dUMjmeTJgEu8ULJIyMxBZxPRGTNp3Cw9Qs2Fop8HkfP/RpUUfqsEgknEIuJSsr\nICys5DphYUxwiPQpPBzuq5ZCni/BAQC5Rg27JQs5o9HMtatXHTsnBaODT3VkKFWY8vMZTPvtLDKz\n2X1FumFLTlmFh0Pz9dfaaeO5FAptgjN3rv4/j6iyetp6qlGpUGynFFtPKwWVWoMl/1zFon1XodEA\nvm72WD6oJbxr2kkdGukRW3KMwdy5+O/MbczqOgprW74ELFig/ZJlgkOkX09nNJY46oYzGisFhVyG\nyd0a4MeRbVDDzgqX4lLx8pJD+PNMrNShkZFjklMOlxIzsSagN2a+MBaYPJlPkURi4IxGekYHnxrY\nOSkYbb2dka5UYdJPp/DBlmh2X1GxmOSUwyUuUkUkPs5opCK4ONjgx5FtMLGrD2QyYMOx2+i7/Ahi\nEtKlDo2MEJOccrh4P0XqEIjM37hxgEyGEgcNKhTaelSpWCjkeOfFhlg3PBDOVa1w4X4KXlpyCDvO\n3pc6NDIyTHLKgS05RAbw4YdAafMiOKOxUuvYoCZ2TgpGoJcz0rJyMH7jSXz8xzlk5bD7irSY5BCR\n8Xm6V5wGKH7gsUwGfPaZAYMiY+TmaIONo9vgrc7abst1Ebfw2ooI3E7MkDgyMgZMciqgvgunLxKJ\nQpeZVRoNZ1YRAG331Xs9fPH9sAA42Vri7N1khC45WGC3eqqcmORUQKNaIqzDQ0ScWUXl0sXXBTsn\nBaOlpxNSM3Mw9scT+GTbeShz1KXfTGaJSU4FMMkhEscTDy/dKnJmFT3D3akKfn6zHcZ01O5Q//3h\nGLz2bQTuJLH7qjJiklMBvrXspQ6ByCx1TveFSibnzCoqF0uFHO+HNMLqN1rDsYolztx5jNDFB7Hn\nQrzUoZGBMckpo4S0LKHcyI0tOUT6duNhGuKzgFUBvUuuyJlVVIpujV2xY1IQmnk4ISUzB6N/OI7P\nd1xAtordV5UFk5wyupxv+rirg7WEkRCZp65fHwAAzOkyAup339W22OSnUABTp3IrFdJJnWq2+PXN\ndhjRoS4AYNXBm3j92wjEPn4icWRkCExyyij/QoAyWYlzP4iojP69/EAov9nJG4p584CMDGGvuFld\nR3GvOCozKws5ZrzcGCsGt4K9jQVO3n6MkMUHsf/Sg9JvJpNmIXUApoYLARKJZ9j3UUJ5es9G2oKV\nFfb1GIhbT9c9mcEuKiqnHn5uaFzLAeM3nkT0vWQMXxuFsZ3q4d0XG8BCwWd+c8T/q2V0KY5bOhCJ\nYdV/N4Tyov7NC1xr4eFk6HDITHlWt8Xmt9phaLvnAAArDlzHgFVHEZecKXFkJAYmOWV06T5bcoj0\nTa3W4POdF4XjXs1rF7jenEkO6ZG1hQKf9PLD8kEtYW9tgaiYRwhZfBAHrjyUOjTSMyY5ZZSjLmUv\nHSIqs8k/nxbKf07oUOh6c89qQpkzY0hfQvxrYdvEIDSu5YCkdCWGfR+Jr/6+jBz+GzMbTHLKqV7N\nqlKHQGQWMpQ5+PNMrHDctE7hVpvG+RbevMxxcaRHXjWq4vdx7TG4rSc0GmDp/msYtPoYHqSw+8oc\nMMkpJ1+udkykFz0XHRTKke8/X2QdK4u8r6pTtx+JHhNVLjaWCnzW2x+LB7RAVSsFjt1MQsjigzh8\nLUHq0KiCmOSUUyM3rnZMVFF3H2UIs6b8ajvAxcGm1HtO3X4sdlhUSb3SzB3bJgbB180eCWlKDP7u\nGBbsuQIVhymYLCY55eTL1Y6JKizoy/1CefPY9jrdc/oOkxwSj3dNO2wd3wEDAj2g0QCL9l3FkO+O\n4UEqu69MEZOcMnj8OA0jorZi5p4VaL11HaBUSh0Skck6diNRKA9q4wkbS0UJtfPcSEgXKyQiANru\nq9l9m2LB681QxVKBI9cTEbr4EI5cZ/eVqWGSo6vwcDhWd8SMf1Zj2MntcPrgPcDWFggPlzoyIpP0\n+sqjQvmz3n6l1q9hx21UyLD6tKiDbRM7oIGrHR6mZmHw6mNYsu8q1Oy+MhlMcnQRHg7Mmweon5lW\nqFJpzzPRISqTjcduC+XZff112iKFa+WQFHxc7PHH+CC81qoO1Brg6z1XMPT7SCTm26yZjBeTnNIo\nlcD8+QCAYr+G589n1xWRjjQaDd7fEi0cDwj01Om+Fp5MckgaVawUmPdaM3z1WjPYWMpx8GoCQhYf\nROTNJKlDo1IwySnN8uXaFpuSqFTaekRUqg+2nhPKv7zZTuf78m/toNGwu4AM79VWdfDnhCD4uNgh\nPiULA1YdxbL919h9ZcSY5JTm+nX91iOqxDKzVQW6qgLrOut8b9N8Sc5NDj4miTRwtccf4zugb4va\nUKk1mPf3ZYxYF4WkdLbmGyMmOaWpV0+/9YgqsX7fHBHKh97rUqZ77awthDKnkZOUqlpb4Ov/NcOX\n/fxhbSHHv5cfInTxQRyPYfeVsWGSU5px4wBFKVNbFQptPSIq1oOUTJyPTQEAeFW3RZ1qtmV+D5vM\nNKz47VO069sV6NMHSEvTd5hEOpHJZHg9wBNbx3eAd42quJ+ciddXHsW3B66z+8qIMMkpjZUVEBYG\nACj2n21YmLYeERWkVAILFwITJ2JFn4mwyNE26e98O7js7xUYiIuL+qPHtWOodesqsHUrYG8PBAbq\nOWgi3TWq5YA/JwbhlWbuUKk1mP3XJYz+4TgeZ7D7yhjINGY2gi8lJQWOjo5ITk6Gg4MeVyUOD4fq\nq6+h0OSbRq5QaBOcuXP19zlE5iI8XDvzMN/AfZVMjv2hg9Ft27qyvVdgIBAVBQ2KmeUYEABERlYk\nWqIK0Wg02Bh5G59suwBljhq1napgycAWaOlZTerQTIYYv7+Z5JSBz7tb8MapnfB8HIdhQ57XdlGx\nBYeosNy1pZ6R+2UjmzpV94eDtDRti01pUlMBOzvdYyQSwbl7yZiw8SRiEjNgIZdhWk9fjAyqq9Na\nUJUdkxwdiJnkeE3bAUA7APLcJ931+t5EZkOp1K4GXtLSCwoFkJGh20NCnz7arqnS9O4NbNmie5xE\nIknNzMa036KxI/o+AODFxq6Y92ozONpaShyZcRPj9zfH5JSDrZVue+wQVUr6XluKyziQibG3scTS\ngS0wq1cTWCnk2H0hHqFLDuIMZwUaHJOccsg/lZWInqHvpITLOJAJkslkeKOdF357qz08nKvg7qMn\neHXFEaw9fJOLWRoQk5xyqMokh6h4+k5K1q/Xbz0iA/Kv44jtE4PRvYkrslUazNx2AeM3nkRKZrbU\noVUKTHLKgd1VRCV4urZUic+qZVlbys5OO3uqCMJnBARw0DEZLccqllgxuBVmvNQYlgoZdkbH4eUl\nh3DuXrLUoZk9JjnlwO4qohJYWeFIrzcA6HFtqcjIYhMdTh8nUyCTyTAiqC5+HdsetZ2q4FZiBvou\nP4L1R2+x+0pETHLKgd1VRMVLSMvCwPr98G1gX6hlz3zFKBRAWaaP5xcZqZ0m3rs3Er0bYpdPGzR6\nexNidx/QT+BEBtDcwwk7JgWhWyNXKFVqfLT1HCb+dAqp7L4SBZOccqhqze4qouK0/mwvAGBOlxFI\nfPgIWLAAmDBB+2dGRsUWz7SzA7ZsgfO1ixjb7yNk2tjhrQ0n9RQ5kWE42Vph1Rut8GFoI1jIZdh+\n9j5eWXoYF55ue0L6wyaJcrC14l8bUVE2HLsllN9o9xxcqjsAkyfr/XNkMhmqV7VCYrqS03LJJMlk\nMowK9kYLz2qYuPEkbiako/fyw/jklSboH+DBxQP1hC055cDuKqLCMrNV+GDLOeF4Vi8/UT9v3Yi8\nPav2XIgX9bOIxNLquWrYMSkYXRrWhDJHjem/R2PKz6eRnpUjdWhmgUlOOdixu4qokHaz9wnl3VM6\niv55frUdhfLoH46L/nlEYqlW1QrfDQ3AtJ6+UMhl2Ho6Fi8vPYRLcey+qigmOeXA7iqigg5ceYhH\nGdqBk229ndHAVYe9pvTglWbuQlmZoy6hJpFxk8tlGNupHjaNaQs3BxvceJiO3ssO45fjd6QOzaQx\nySkHTiEnyqNWazB0Td4U7o2j2hrss7/o6y+UZ/910WCfSySWAC9n7JgUhI4NaiIzW43wzWfxzi9n\nkKFk91V5MMkpB47JIcozcPVRobxuRCDkcsMNmMz/wPH94RiDfS6RmKrbWWPtsABM7d4Qchnw28m7\n6LX0MK7Gp0odmslhklMOVbniMREA4HJcKo7eSAIAONlaolODmgaPYW6/pkL5VmK6wT+fSAxyuQzj\nu/hg4+i2cLG3xtUHaXhl6WH8fvKu1KGZFCY55cCWHCKt7gv/E8pHpz8vSQyvta4jlDkAmcxNW+/q\n2DEpGEE+NfAkW4WwX84gfPMZPFGqpA7NJDDJ0ZFKnbfsNpMcImDmn+eF8ud9/GBjKU0Lp0wmQ51q\nVQAAV+LTJImBSEw17a2xbkQgpnRrAJkM+OX4XfRedhjXH/Lfe2mY5OgoIy0DI6K2YuaeFaj53XJA\nqZQ6JCLJPEjNxNojMcLxoDbPSRcMgO+H5e1r9eeZWAkjIRKHQi7D293qY8PINqhhZ43L8al4eckh\n/HH6ntShGTWZxsx2BktJSYGjoyOSk5Ph4OCgnzcND4fm668hU+eboqpQaDcZrMgS9UQmymvaDqF8\n/MNuqGFnLWE0WvljipkTKmEkROJ6kJqJST+dEsbDDQj0xMcvN5asNVVfxPj9zZac0oSHA/PmAepn\n1uBQqbTnw8OliYtIIuvyteCMDKprFAkOAPQP8BDKmdkcr0Dmy8XeBhtGtcWkrj6QyYCfIm+jz/Ij\nuJnAgffPYktOSZRKwNZWm9AUR6HQbjpoZVWxzyIyAU+UKjSasUs4NqYWk8xsFXw/0sbWP8ADc/LN\nuiIyV/9deYgpP59GYroSdtYWmNPPHy81dS/9RiNkci05SUlJGDRoEBwcHODk5ISRI0ciLa34gVJJ\nSUmYOHEiGjZsiCpVqsDT0xOTJk1CcnKymGEWb/nykhMcQHt9+XLDxEMkscDP9wrlvWHib91QFvmb\n6jdFcZVYqhw6NqiJnW8HI9DLGWlZOZiw8RQ+2noOWTlszQRETnIGDRqE8+fPY8+ePdi+fTv+++8/\njBkzptj6sbGxiI2NxVdffYVz585h7dq12LVrF0aOHClmmMW7fl2/9YhM2P5LD5D6dNPAIJ8a8HEx\nzNYNZbFkQAuhzIXTqLJwdbDBxtFtMK5zPQDA+qO30O+bI1w3CiJ2V128eBGNGzdGVFQUWrduDQDY\ntWsXQkJCcPfuXbi76wzcodoAACAASURBVNac9uuvv2Lw4MFIT0+HhUXhqdtZWVnIysoSjlNSUuDh\n4aGf5q6FC4EpU0qvt2ABMHlyxT6LyIip1Rp4v79TOL45OwQymeFWNi6L3AHIdapVwaH3ukocDZFh\n7b/8AGE/n8ajjGzYW1tg7qtN0dO/ltRh6cSkuqsiIiLg5OQkJDgA0K1bN8jlchw7dkzn98n9jy0q\nwQGA2bNnw9HRUXh5eHgUWa9cxo3TjrkpiUKhrUdkxv73bYRQ3jCqjdEmOABQ38UOAHD30ROJIyEy\nvC4NXbBjUjBaPVcNqVk5eGvDScz883yl3cBWtCQnLi4OLi4uBc5ZWFjA2dkZcXFxOr1HQkICPv30\n0xK7uKZPn47k5GThdeeOHvviray008QBFNvcFRbGQcdk1i7EpuD4rUcAtIuSdfCpIXFEJVs9NO/B\nijs4U2Xk7lQFm8a0xZsdvQEAa4/E4LUVR3AnKUPiyAyvzEnOtGnTIJPJSnxdunSpwoGlpKQgNDQU\njRs3xsyZM4utZ21tDQcHhwIvvZo7F5g6FZA/81elUGjPc50cMnMhiw8K5YPhXSSMRDfPVa8qlMM3\nn5UwEiLpWCrkmB7SCN8NbQ3HKpY4czcZoYsPYvd53RoZzEWZ9yd45513MGzYsBLreHt7w83NDQ8e\nPChwPicnB0lJSXBzcyvx/tTUVPTo0QP29vbYsmULLC0tyxqmfs2di4yPZuLr3m/D83Ecer8aDKd3\nJrMFh8ze+1uihfKX/fxNZrGxYe29hBWZ07JyCuxWTlSZPN/IFTsmBWHCxlM4fecxxqw/gVFBdfFe\nT19YKsx/qTzRBx4fP34crVq1AgDs3r0bPXr0KHHgcUpKCrp37w5ra2vs3LkTtra2ZfpcUVY8RsGB\nl7undEQDV+ObWUKkT/EpmWjzxT7h2JjWxCmNMkeNBh/+BQDo1dwdi/q3KOUOIvOmzFFj7q5LWH3o\nJgCghacTlg5sidpOVSSOLI9JDTxu1KgRevTogdGjRyMyMhKHDx/GhAkT0L9/fyHBuXfvHnx9fREZ\nGQlA+x/44osvIj09Hd999x1SUlIQFxeHuLg4qEpbr0ZkcnneQMu0p9NoicxZ/gTn5EcvSBhJ2VlZ\n5H21/XGae1kRWVnI8eFLjfHtkFawt7HAqduPEbLoIPZdjJc6NFGJ2la1YcMG+Pr64vnnn0dISAiC\ngoKwcuVK4Xp2djYuX76MjAztYKiTJ0/i2LFjiI6Oho+PD2rVqiW89DqguILSmeSQOVIqtcsmTJyI\no5M+gkWOdhPaNzt5w7mq6XXNrnojbwDyuXsSLShKZGS6N3HDzknBaFrHEclPsjFy3XHM3nkR2Srz\nnH3FbR3KIHf9jRWDW6KHn2msO0Ckk/BwYP78Ait8q2RyrArojbHHfpMwsIrJ/ZmtYWeF4x+aVmsU\nkZiyclSYvfOSMHat9XPVsGRgC9RylK77yqS6q8xZWhaXyyYzkrsJ7TNdwnKNGm9G/m7Sm9A2q+MI\nAEhIU8LMnueIKsTaQoGZrzTBN4Nawt7aAsdvPULIooP49/KD0m82IUxyyoHdVWQ2lEptC04RZE9f\nmD9fW88EfTO4lVD+IeKWhJEQGaee/rWwfVIQ/Go74FFGNoZ9H4V5f19Cjpl0XzHJKQcOPCazYeab\n0Lrnmzny8Z/nJYyEyHg9V70qNo9tjyFtnwMALNt/HQNXH0N8SqbEkVUck5xyYEsOmY1KsAlt7qaF\nAJCckS1hJETGy8ZSgU97+2HJgBaws7ZA5M0khCw6iINXH0odWoUwySmHDCXH5JCZqFev9DplqWeE\nwl5oIJTf3XxGwkiIjN/LzdyxbWIQGtVyQGK6Em+sicT83ZehUj8d05ZvFiYWLjT6rmwmOeXA7ioy\nF8oxY6GSyYvfmw0w+U1oLfKt6rrngnmvCUKkD3VrVMWWce0xINATGg2w+J9rGLz6GNInhwG2tsCU\nKcDSpdo/bW2NenICk5xyYHcVmQO1WoMGs/ZhVUBvAOa9Ce36kYEAAJvMNCS9GAo0bQr06QOkpUkc\nGZFxsrFUYHZffyx8vTlsrRTo9N082C5aAM2zY/hUKu3sTCNNdLhOThnkrrkRXL8G1o9so9f3JjK0\n3H/PALD6/C/o9teGgoOQFQptgmMmm9CeqtUAzeOuQvbshYAA4Omq60RU2LW7SajrWRNyjbrwz08u\nhQLIyKjQAxHXyTESbMkhU9f6s71CuYWnE7ptW6f9glqwAJgwQftnRobZJDgIDETzuKtFX4uKAgID\nDRsPkQnx2fwDFCUlOIDRzsLk1rzlkM7FAMmEvfrNESSkZQEAqtlaYsu4DtoLVlbA5MkSRiaStDRt\nIgMU/yUdFaWtZ2dnsLCITMW1I6fho0tFI5yFyZaccuDAYzJVYT+fxvFbj4TjUzNelDAaAxkyBEAJ\nCc4z9YgIUKk1mPHHOXhN24GNiZa63WSEszDZklMO6UomOWR6vvr7Mn4/dU84vvFFiITRGFAlWAuI\nSF8eZ2injZ+9m7ep7Q8tQvDB/jWlj8kxwlmYTHLKgWNyyNSsP3oLS/dfE44vf9YDcnmpbRvmoV49\nIDpat3pEldTF+ynouehgkdd+mtAJCvk72llUxTHSWZhMcsrAJjMNC3csgOfjOOBCC2D9evbhk9Hb\ndS4OH209JxxHz3wR1hYKCSMysPXrAXv7Yi9r8LQra/16Q0VEZDS2nYnFxJ9OFTpf26kKfnurPdwc\nbbQncichzJ9vUrMwOYVcV4GB0ERFcfopmZSomCS8tiJCOI58/3m4ONhIGJFEAgOFwcf55X75JTZu\nhhrnTxs2JiKJqNUafLHzIlYfulno2kv/b+/O46qq8/+Bv9hRWVUUFwxBwCW3WIwKxURFqG9ajY4x\nlY6NTraZS+KS1rgxRtmMk2PZb8gcm7ImmkZUxH1jBBVXUIEgV1AkWUT2z++PKwduwOVeuPeeew+v\n5+PBw3sOn3Pv+34e13vefNYhPfDh5KHN/yFUWamaRZWdrWr9nD1bby04hrh/syVHG818QQKon37K\nRIdMTGZ+iVqCs3feqPaZ4ACq/5/N/D8+7e6DSU+vwr9//gX+D7nKEByRcRSXV+H3calqkw/qLI0c\ngFdCvFp+EjObhcmWnJaUlmps6paUlLDrikzGzaL7CF6zTzr+fvZjeKQPb+AoLVXNonrwV+i1v36K\nJz6pT3yORT+ptnM5kRJk3SpB+MeHUV3b+Hb/1Ssj8Fi/rjJE1ZghWnKY5LRk0iTghx9aLjdxIhAf\n3/bXI2qjovtVGPr+bun4/70cgDEDussYkWlLySnE5E/rW7wy/hSODrbtaMwSKdau83n44z9PNjrv\n5miHH157HL1MLKFnd5UcOP2UzEh5VY1agvPn5wYzwWlBUN/OiHl2MKK/V83AGrBsF3LWRMDCop3M\nPiNFEULgg8RL2HCg8T1p7MDuWD91OOxt2k8SzySnJZx+Smaiplag/7u7pOO5Y30xJbCPjBGZj98G\n9UH6zWJ8mfwzAMBv6S5cXjVB5qiItFdaUY2ZX57Asew7jX63YLwfZod6t8vEnd1VLeGYHDIDQgj0\nXbRDOp4S4IE/Pz9ExojMU8RfDiP9ZjEAbsRL5iGn4B4i/3oYZZWNtxv6YnogQv26yRBV63CDTjk4\nOKimiWsSGMgEh2T18PJE6fHj/bowwWmlHW+FSI8PZxbgw92XZIyGqHn7LubDMzoBo2MPqCU4TvbW\nOLggFLkxkWaV4BgKu6u00cz0UwHAguvkkMwi/nIY9x58yfV27YCtrzwqc0TmLXt1BLwXq1rF1u/L\nQn93J0QO6SFzVESqFtu/7s3Cuj2XG/1upK8bNv7uEXS05W29IXZX6aK0FOJ3v0PG0dO44uKOpCUf\n4MNpIS1fR2Qgf9xyErsu5EnHuTGRMkajHMXlVRjyXv0A7u1vPIGHeznLGBEpnoZF9u5X1uDVrSdx\n4NLtRpe9NcYHc8J8FDHehlPItWDQJOcBz+gE6TFvKiSXldvT1VYs5Ywg/copuIfRsQek49QlYXBz\ntJMvIFKud95pcruE4lffwCi3CfilrKrRJZteCsDYgcqaOckxOSbizTE+0uOqmloZI6H26vPDP6kl\nOJmrJjDB0bO+XTthy4wg6Thw1R5UVDce3EnUJu+8o9r4skb9syVqauD4t48xK+FT6Zy9jSX2zhuF\n3JhIxSU4hsIkpxVmh9ZPF//iaK58gVC79OOZG1iZkCEdp/9pPGys+F/ZEEJ83LDsqYHSsd/SXVBY\n4zfJqbJS1YLThLo/WV5J/QGP93HE+ffH4+KKCfB24yQXXfCbsRUaLqS0akeGhpJE+nU0qwBvNtgx\n+OTSMA40NLDfP9EXzw7vJR0HrtojYzSkKBs2NGrBacgCgLWoxdbKU3Cw4//z1mCS00pj+nNqHhnX\nhRtFiPr8uHR8aMFodHHgGBFj+GjKMPR2VS2BX1BaidlbGy+VT6SL/565gS+27NWuMFfUbzUmOa20\n/OlB0uNjWQUyRkLtwdXCMkT+9Yh0vP2NJ9CnS0cZI2p/jix8Unq841weNh7kjYd0U1ZZjVf/eRKe\n0Ql4419puOLirt2FXFG/1ZjktFLDG8zieC22fSBqpcJ7lQhZu1863jIjiNOZZZLZYKuHmJ0XsTcj\nX8ZoyFycuvILPKMTMHBZInaer1/y4cvhEai1tITGUV5WVqrp5NQqTHLaoLuTqqsg906ZzJGQUt2v\nrMEjK5Kk44+nDEOIj5uMEbVvNlaWOPXuWOl4xuYTyMwvkTEiMlU1tQIxOy/CMzoBz2441uj38bMf\nQ1bsJFjOmweN8yLnzpXWyyHdMclpgzXPDpYe37h7X8ZISImqa2oxYFn9hpuLJvTHxAYDYEkenTvZ\nInHOSOl47LpDuFtWKWNEZEquFpbh8Zh98F68o1GXZuTgHsj4UzhyYyIxvI+r6uTatcCCBaoWm4as\nrFTn1641UuTKxMUA26huYcCIwe7YEOVv8Nej9uHXG25Of9xTbRwYyS8pPR9/+PKEdJy5agKn8rdj\n36RewcJ/Nz10YUPUI4gY3MLWIBpWPG4vDHH/5pw0PdlxLq/lQkRaapjghA3ozgTHBI0d2B0Lxvvh\ng0TVJp4+S3ZyBfR2pri8Cq9tPYXDmY0nnwzq6YS4aYHo5mSv3ZPZ2gJz5ug5QmKS00bzx/kidrdq\ns7SK6hrYWVu1cAWRZqEf1A8y9uvuiM9fDpAxGtLktdH9cPrqXSSlqwYgj449gP3zQ+UNigzuWFYB\nXmiwnEND74T74dVR3lyB3ESwbbWN/jDSS3r8+eEcDSWJWvbyP1Kkgey2VpZIfHtkC1eQ3Da9FAAn\ne9XfizkF97Dg2zMyR0SGUFVTi6U/nINndEKjBKejrRV2vhWC3JhIzA7txwTHhLAlp40attx8kHgJ\nr43uJ2M0ZM4Wx5/Dwcv1uwxfWhkuYzSkizPLx0ldjN+evIbBvZ3xUrCnvEGRdloYC5N1qxS/2Xis\nyU0ypwR4YMXEh2FrzfYCU8UkRw/CB7lj1wWOyaHW+9u+THx1/Ip0nL2aO4qbEwsLC1xcEY7+76pm\nwy37zwX0c3PAY/26yhwZadTU7t/z50O8/Tb+8cxsrNie3uRlX0wPRKgfV703B0w/9eDdp+s38Dtw\n6ZaMkZA5+vbEVWlcFwBcXBEOK0smOObG3sYKKYvHSMcvfH4cubn5wKRJwJAhqn9LS2WMkNRo2P0b\nsbGomjdf7fyIvp1xetlY5MZEMsExI5xCrid1U8l7uXTA0egnWyhNpLL/0i1Mj0uVjk8vGwuXju1r\n2qjSnLtWhKf/dgTxm9/GsLzMxgu9BQYCKSlyhEZ1KiuBjh2b3RxTAKixsET/ud9h+XPD8SK7Ho3C\nEPdvtuToSd3mfde5KCBp6czVu2oJzrHoJ5ngKMDg3s5I274Uw/Iymy6QmgoEBRk3KFJTtX69Vrt/\nZ/X+mQmOmWOSoyerJ9Wvfny1kNs8kGY5BffwzCdHpePEOSPR06WDjBGR3pSWwvXCaQBofrn+1FR2\nXRnZreJyvPmvNHhGJ2DrVwe0u4i7f5s9DjzWk5G+9fsJrdiejs9e4tom1LTbJRUYHXtAOv5m5qPw\nc3eULyDSrxdfBKAhwXmg5oUoWP34H8PH046du1aERfFncf56sdp57v7dfjDJMYDd6dyZmJpWWlGN\nwFV7pOMNUY9ghFcXGSMivdPyr/9LyWcQEZ2Ax7y7YHHEAO4srwdCCGw/exPvfHcW96ua747qumAO\nxME4WGjosuLu38rAJEePFob3x593XQQAlFfVwN6Gqx9TvcrqWjy8PFE6fv//BrW8nw2ZH29v4FzT\nexg1VNeacCz7Dp5af0Q6//rofvhjqDcc7Pj1rI3yqhpsPJiNj/c0MwYKgKOdNdY+PwThD7vXL80w\nd65qdlVzuPu3InB2lR5VVtfCd+lOAMDbYb54K8zHqK9Ppqu2VsBrcf1+VK+GemNheH8ZIyKDKS0F\nHDV3PwoAm/6bhtVHrmss59W1E959aiBC/dy4blIDt4rLsSIhA/89c6PZMkM9XLB60sMY1FNDC1lT\n6+RYWakSHO7+bXSGuH8zydGzuqnkALhZH0kafi6eGdYTf/ntcBmjIYMLClINLm7Or6aRZ90qRczO\nDOzJ0LzO1vP+vTF/nB/cnbXc9NHU6bDz9tlrd7Ho+3O4cKO4yd8DwLPDe2FRxAC4OdoZJAYyLCY5\nWpA7yXntq1NIOHsTAJMcUglctQe3SyoAAMM8XPDDa4/LHBEZRXOJTgvr5NTWCvxw+jpWbE9vciuB\nOp1srbD0qYGYHOBhnotHttCKIoTAj2duYOG/z6K8qrbZp1kw3g+vhPTl5sgKwCRHC3InOTeL7iN4\nzT4AwOcvBSBsYHejx0CmY/LGZKTkFgIAXDra4PSycTJHREZVWqqabVXXSrBlC+DgoNNT3C6pwMd7\nLmNrg20/mhLi0xWLIwZgQA/jf+/prG614V+puxl9GvQsYkb/vslLmxxfQ4rAJEcLcic5QH3XhJuj\nHVKXhMkSA8ngVze0dybNw7b0IunXbNkjfTiSWYCVCem4mFeisdycMB/MHOmFjrYmNoBZh9WGq61V\n3UZaja8hs8ckRwumkOSEfrAfuXdUCwLyxtZONNE1IQCcdvfBpJfX4afVEbA0xy4FMmllldX4/HAO\nPkq6rLGcb3cHvPvUQIT4uGksZ6jxKfnF5Th0+TYOZRbAY/OneCfx0xaviX9pPkI+WYmuDjqMryGz\nxiRHC6aQ5BzLKsALnx8HAByYHwrPrp1kiYOMpJmxF3X/sWoDAmClaRAqkZ5czCvGmh0XcfDybY3l\npgZ54O2xvujm2GAAcxtmGgkhkH27FAcvFzxIZm6juTvLe0kbMe3U9pbfzOuvA+vXt1yOFMMQ928T\na8dUhsf6dZUev//fC4ibzn1qFKu0tNlZNBZQJTpWJ06oyuk4FoNIV/3dnbD596rvm5page9OXsXK\n7RkoqahWK/evlKv4V8pVAICTvTW2/RQPvy2fNl6luaZGGjtTvSYGZ64VSUlM2pW7rYqRqw2TMTHJ\nMbD9lzT/RUVm7sES/s2RbhovvgjExxs8HKI6VpYWmBLYB1MC+wAA8orK8VHSJWw7cU2tXFlpGXz+\nuanZ5xEAamI/RP/aYGmMjDYc7a0x0tcNo3zcEOLbFT2cH+zNVjkW6BincYNMrjZM+sIkx0CWRg7A\nyoQMAMD9yhp0sOX0RkXSdgM/bvRHMnN3tsfa54di7fNDIYTAgcu3sXJ7Okbt+AFWovkp2nU7cr+U\ntgP/CJyo9rteLh1UiYxvVwR7d4VzB5uWA7G15WrDZDRMcgzk5cc8pSRnw4EszBvnJ3NEZAjZTt3h\njZaX8GfTO5kSCwsLjPbrhtF+3YDcfwP7Wr7mDz0FFq4M1896NHVjfLjaMBmYpdwBKJWNVX3Vrt+X\nJWMkZAi3SyrgGZ2AyIBXIFA/yLhZW7YYISqiVtAyAe/h/7B+F9xbuxYoKwPWrVMNMl63TnXMBIf0\niEmOAU0a3kt6rLBJbO3ah7svSTuJl9s74LR7C3uUBQZy0DGZrtmzVS0omhhqjIytLTBnjmoW1Zw5\n7KIivWOSY0CLIvrDvrwUG/+9AiV+g4BJk1SzbMgs5RWVwzM6Qa1lbuZILwy/eRkWgYFNX9TCEv5E\nsqsbI6MJx8iQmeKYHAPqNmYkMlJT62fYZGaodifmjc/srNyejs+P5KidO754DLo7PVhnJCVFL0v4\nE8mCY2RIobgYoKE8WCBOAI3XngCY6JiJq4VlCFm7X+3cm2N8MHesr0wRERkQd+QmGRni/m3Q7qrC\nwkJERUXByckJLi4umDFjBkpb6K6ZNWsWvL290aFDB7i5ueGZZ57BxYsXDRmm/jVYIK7ZhfxTU9l1\nZeIWx59rlOCcWBrGBIeUi2NkSGEMmuRERUXhwoULSEpKwvbt23Ho0CHMnDlT4zX+/v6Ii4tDRkYG\nEhMTIYTAuHHjUKNp4ShT08ICcTqXI6PKKbgHz+gEfNVg1+eF4f2RGxPJfXSIiMyIwbqrMjIyMHDg\nQKSmpiIgIAAAsGvXLkRERODatWvo2bOnVs9z9uxZDB06FFlZWfBuYqpjRUUFKioqpOPi4mJ4eHjI\n2101ZAhwTou1UwYPBs6eNXw8pLW3vzmN+LTraudOLxsLl478i5aIyJDMqrsqOTkZLi4uUoIDAGFh\nYbC0tMTx48e1eo579+4hLi4Offv2hYeHR5Nl1qxZA2dnZ+mnuXJGpe3Cb1wgzmRk5pfAMzpBLcF5\n7+mByI2JZIJDRGSmDJbk5OXloVu3bmrnrK2t0blzZ+Tl5Wm8dsOGDXBwcICDgwN27tyJpKQk2DbT\nN7xo0SIUFRVJP1evXtXbe2i1FhZ+q1s8rjJus1HCoeYJITDzyxMYu+6Q2vlz743DtMf7yhQVERHp\ng85JTnR0NCwsLDT+tHWgcFRUFNLS0nDw4EH4+vpi8uTJKC8vb7KsnZ0dnJyc1H5k5+Cgmj3VhLq+\nwdPuPvCNOYyisirjxUVqLtwoQt9FO7A7PV86F/PsYOTGRMLRXos9eIiIyKTpvE7OvHnzMG3aNI1l\nvLy84O7ujlu3bqmdr66uRmFhIdzd3TVeX9f15OPjg0cffRSurq6Ij4/H1KlTdQ1XPikp0jTyhiwA\n5HoNxKTfqNadGPqn3Ti0YDT6dOkoQ5DtkxACL/0jBYczC6RzlhbA+ffHo6Mtl44iIlIKnb/R3dzc\n4Obm1mK54OBg3L17FydPnoS/vz8AYN++faitrcWIESO0fj0hBIQQaoOLzUYzC8R5Ojhg7t5MfJR0\nGQAw8oP9+H72Y3ikj6vMAStf2pVfMGnDMbVz66YMxaThvWWKiIiIDMWgiwFOmDAB+fn52LhxI6qq\nqjB9+nQEBATgq6++AgBcv34dY8aMwZdffomgoCD89NNP+OabbzBu3Di4ubnh2rVriImJwdGjR5GR\nkdFojE9TTGYxQC385/R1vPX1aen471GPYMLgHjJGpFy1tQK/+TQZJ3/+RTrnaGeN1KVhsLfR46aD\nRETUKmY1uwoAtm7div79+2PMmDGIiIjAE088gc8++0z6fVVVFS5duoSysjIAgL29PQ4fPoyIiAj0\n69cPU6ZMgaOjI44dO6ZVgmNunhnWC9tmBUvHr249hU8PZssYkTKl5BTCa/EOtQTn71GP4Nz745ng\nEBEpGLd1MAE/3S7Fkx8elI6nBHjgz88PkTEiZaipFYj862FczCuRzrk52uHowidha829aYmITInZ\nteSQdrzcHHDq3bHS8TcnrmLiJ0dljMj8HcksgPfiHWoJzj+mBSB1SRgTHCKidoItOSakvKoG/d/d\nJR3bWFng8soJsLBodgcs+pXqmlqM+eggfr5TJp3z7NIRe+aOgrUVkxsiIlPFlhyFs7exwk+rI6Tj\nqhqBvot2oLK6VsaozMfejHz0W7JTLcHZMiMIBxaMZoJDRNQO8ZvfxFhaWiA3JhLebp2kc75Ld6Lo\nPhcNbE5ldS0CVu7BjM0npHMDezghe3UEQnxaXu6AiIiUiUmOido7LxRPDamfTj70/d24Wlim4Yr2\nace5m/BduhMFpfXrKG2bFYwdb4XAypLdfERE7RmTHBP2txcewZwwH+k4ZO1+nL56V8aITEd5VQ0G\nLduF2VtPSecCHnLFT6sjENS3s4yRERGRqWCSY+LmhPnio8lDpeOJnxzFrvOaNzhVuvi0a+j/7i7c\nq6yRzv3w2uP47tXHYMnWGyIieoAb9ZiBZx/pjZ4uHfDbz/4HAPjjP09iaeQAvBLiJXNkxlVWWY2B\nyxLVzoX4dMWXvw/iDDQiImqELTlm4lGvLtgzd5R0vDIhA4vjz8kYkXH9K+VKowRn+xtPYMuMEUxw\niIioSUxyzEi/bg44sTRMOv7q+BX8ZuMxDVeYkdJSYNIkYMgQ1b+lpQCAkvIqeEYnYNH39Qld+CB3\n5KyJwMO9nOWKloiIzAAXAzRDv140sIONFdL/NN58WzSCgoDU1Eanbw0YgqD/W612LuntkfDp7mis\nyIiIyEi4GCABaLxo4P2qGvRdtANVNWa4aGAzCY4A4JZxFvGb3wYATBreC7kxkUxwiIhIa2zJMXOj\nYw8gp+CedHz2vXFwsrdRdfe8+CKQnQ14ewNbtgAODjJG2oTSUsCx+aSl7oOZm5OHvp7djRMTERHJ\nwhD3byY5CvDqP09iZ4Np5Zd2L4dd2snGBQMDgZQUI0amUlFdg6uFZcgpKMPPd+4hp+Aecu/cw8yP\n5mFUhhZjiiZOBOLjDR8oERHJxhD3b04hV4C//84fH+6+hPX7shC/+W3Y5mVCAGg0Qic1VdU91MpE\np6qmFtd/uY+cO/eQW6D6yblThtyCe7jSitWYl9y+rl3B7Gydn5uIiIhJjkLMG+eHPra1GPbnTABN\nJDh1UlNRU1yCG9VWyK1LVh4kKnXJS62R2vauuLhjYMHPLRf09jZ8MEREpDhMchTkN39ZrFW5JP+x\n+ONz7xokhp7O7WV9MwAACddJREFU9vDs2gmeXTuhbxfVv55dOsKjc0fY21ipF146SuOYHMmWLQaJ\nlYiIlI1JjpJo2a3T527L20J0c7SDZ5dO8OzaUS1heahLR3S01dPHxsFBNU6oidlVksBA0xswTURE\nZoFJjpJ4ewPnWl4FuZf/oPpZWHJLSWl2GrlcA6WJiEgZOLtKSVqYki0pKTG91hFzmPJOREQGw9lV\npJk5d/84OHCaOBER6RVXPFaalBRVItMUdv8QEVE7wpYcJUpJYfcPERG1e0xylIrdP0RE1M6xu4qI\niIgUiUkOERERKRKTHCIiIlIkJjlERESkSExyiIiISJGY5BAREZEiMckhIiIiRWKSQ0RERIrEJIeI\niIgUSXErHtdtql5cXCxzJERERKStuvt23X1cHxSX5JSUlAAAPDw8ZI6EiIiIdFVSUgJnZ2e9PJeF\n0GfKZAJqa2tx48YNODo6wsLCos3PV1xcDA8PD1y9ehVOTk56iLD9YN21Deuv9Vh3rce6az3WXevV\n1V16ejr8/Pxgaamf0TSKa8mxtLRE79699f68Tk5O/NC2EuuubVh/rce6az3WXeux7lqvV69eektw\nAA48JiIiIoVikkNERESKZPXee++9J3cQps7KygqhoaGwtlZc757Bse7ahvXXeqy71mPdtR7rrvUM\nUXeKG3hMREREBLC7ioiIiBSKSQ4REREpEpMcIiIiUiQmOURERKRITHKIiIhIkZjkNKGwsBBRUVFw\ncnKCi4sLZsyYgdLSUo3XzJo1C97e3ujQoQPc3NzwzDPP4OLFi0aK2HToWneFhYV444034Ofnhw4d\nOqBPnz548803UVRUZMSoTUNrPnefffYZQkND4eTkBAsLC9y9e9dI0crvk08+gaenJ+zt7TFixAik\npKRoLP/tt9+if//+sLe3x+DBg7Fjxw4jRWp6dKm7Cxcu4LnnnoOnpycsLCzw8ccfGzFS06NL3W3a\ntAkhISFwdXWFq6srwsLCWvycKpkudff9998jICAALi4u6NSpE4YNG4YtW7bo/JpMcpoQFRWFCxcu\nICkpCdu3b8ehQ4cwc+ZMjdf4+/sjLi4OGRkZSExMhBAC48aNQ01NjZGiNg261t2NGzdw48YNxMbG\n4vz58/jiiy+wa9cuzJgxw4hRm4bWfO7KysoQHh6OxYsXGylK0/DNN99g7ty5WL58OU6dOoWhQ4di\n/PjxuHXrVpPljx07hqlTp2LGjBlIS0vDxIkTMXHiRJw/f97IkctP17orKyuDl5cXYmJi4O7ubuRo\nTYuudXfgwAFMnToV+/fvR3JyMjw8PDBu3Dhcv37dyJHLT9e669y5M5YsWYLk5GScPXsW06dPx/Tp\n05GYmKjbCwtSk56eLgCI1NRU6dzOnTuFhYWFuH79utbPc+bMGQFAZGVlGSJMk6Svutu2bZuwtbUV\nVVVVhgjTJLW17vbv3y8AiF9++cWQYZqMoKAg8dprr0nHNTU1omfPnmLNmjVNlp88ebKIjIxUOzdi\nxAgxa9Ysg8ZpinStu4YeeughsW7dOkOGZ9LaUndCCFFdXS0cHR3F5s2bDRWiyWpr3QkhxPDhw8XS\npUt1el225PxKcnIyXFxcEBAQIJ0LCwuDpaUljh8/rtVz3Lt3D3Fxcejbty88PDwMFarJ0UfdAUBR\nURGcnJza1Yqh+qq79qCyshInT55EWFiYdM7S0hJhYWFITk5u8prk5GS18gAwfvz4ZssrVWvqjlT0\nUXdlZWWoqqpC586dDRWmSWpr3QkhsHfvXly6dAkjR47U6bWZ5PxKXl4eunXrpnbO2toanTt3Rl5e\nnsZrN2zYAAcHBzg4OGDnzp1ISkqCra2tIcM1KW2puzoFBQVYsWJFi900SqOPumsvCgoKUFNTg+7d\nu6ud7969e7N1lZeXp1N5pWpN3ZGKPupu4cKF6NmzZ6OEW+laW3dFRUVwcHCAra0tIiMjsX79eowd\nO1an1243SU50dDQsLCw0/rR1oHBUVBTS0tJw8OBB+Pr6YvLkySgvL9fTO5CPMeoOAIqLixEZGYmB\nAwdCKVuqGavuiMi0xcTE4Ouvv0Z8fDzs7e3lDscsODo64vTp00hNTcWqVaswd+5cHDhwQKfnaDf9\nAfPmzcO0adM0lvHy8oK7u3ujgVDV1dUoLCxscdCds7MznJ2d4ePjg0cffRSurq6Ij4/H1KlT2xq+\nrIxRdyUlJQgPD4ejoyPi4+NhY2PT1rBNgjHqrr3p2rUrrKyskJ+fr3Y+Pz+/2bpyd3fXqbxStabu\nSKUtdRcbG4uYmBjs2bMHQ4YMMWSYJqm1dWdpaYl+/foBAIYNG4aMjAysWbMGoaGhWr92u0ly3Nzc\n4Obm1mK54OBg3L17FydPnoS/vz8AYN++faitrcWIESO0fj0hBIQQqKioaHXMpsLQdVdcXIzx48fD\nzs4OP/74o6L+yjH25649sLW1hb+/P/bu3YuJEycCAGpra7F37168/vrrTV4THByMvXv3Ys6cOdK5\npKQkBAcHGyVmU9GauiOV1tbd2rVrsWrVKiQmJqqNuWtP9PW5q62t1f2eqtMw5XYiPDxcDB8+XBw/\nflwcOXJE+Pj4iKlTp0q/v3btmvDz8xPHjx8XQgiRnZ0tVq9eLU6cOCF+/vlncfToUfH000+Lzp07\ni/z8fLnehix0rbuioiIxYsQIMXjwYJGVlSVu3rwp/VRXV8v1NmSha90JIcTNmzdFWlqa2LRpkwAg\nDh06JNLS0sSdO3fkeAtG8/XXXws7OzvxxRdfiPT0dDFz5kzh4uIi8vLyhBBCvPjiiyI6Oloqf/To\nUWFtbS1iY2NFRkaGWL58ubCxsRHnzp2T6y3IRte6q6ioEGlpaSItLU306NFDzJ8/X6SlpYnMzEy5\n3oJsdK27mJgYYWtrK7777ju177aSkhK53oJsdK271atXi927d4vs7GyRnp4uYmNjhbW1tdi0aZNO\nr8skpwl37twRU6dOFQ4ODsLJyUlMnz5d7UOZk5MjAIj9+/cLIYS4fv26mDBhgujWrZuwsbERvXv3\nFi+88IK4ePGiTO9APrrWXd3U56Z+cnJy5HkTMtG17oQQYvny5U3WXVxcnPHfgJGtX79e9OnTR9ja\n2oqgoCDxv//9T/rdqFGjxMsvv6xWftu2bcLX11fY2tqKQYMGiYSEBCNHbDp0qbu6z92vf0aNGmX8\nwE2ALnX30EMPNVl3y5cvN37gJkCXuluyZIno16+fsLe3F66uriI4OFh8/fXXOr+mhRBC6Nb2Q0RE\nRGT62s3sKiIiImpfmOQQERGRIjHJISIiIkVikkNERESKxCSHiIiIFIlJDhERESkSkxwiIiJSJCY5\nREREpEhMcoiIiEiRmOQQERGRIjHJISIiIkX6/yTNdgyfdbICAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"3Ljh97Mauo8h","colab_type":"code","colab":{}},"cell_type":"code","source":["# Helper code to create sharded recordio files.\n","# (No need to read through this.)\n","\n","# Well... Since you continue to read through this cell, I could as\n","# well explain in more detail what it is about :-)\n","# Because we work with large amounts of data, we will create \"sharded\"\n","# files, that is, we split a single dataset into a number of files, like\n","# train-00000-of-00004, ..., train-00000-of-00005 (if we're using 5 shards).\n","# This way we have smaller individual files, and we can also easily access\n","# e.g. 20% of all data, or have 5 threads reading through the data\n","# simultaneously. With large datasets, try to shard data into individual files\n","# ~ 100 MB.\n","\n","# The code in this cell simply takes a list of iterators and then\n","# randomly distributes the values returned by these iterators into sharded\n","# datasets (e.g. a train/eval/test split).\n","\n","def rand_key(counts):\n","  \"\"\"Returns a random key from \"counts\", using values as distribution.\"\"\"\n","  r = random.randint(0, sum(counts.values()))\n","  for key, count in counts.items():\n","    if r > count or count == 0:\n","      r -= count\n","    else:\n","      counts[key] -= 1\n","      return key\n","\n","def get_split(i, splits):\n","  \"\"\"Returns key from \"splits\" for iteration \"i\".\"\"\"\n","  i %= sum(splits.values())\n","  for split in sorted(splits):\n","    if i < splits[split]:\n","      return split\n","    i -= splits[split]\n","\n","def make_counts(labels, total):\n","  \"\"\"Generates counts for \"labels\" totaling \"total\".\"\"\"\n","  counts = {}\n","  for i, name in enumerate(labels):\n","    counts[name] = total // (len(labels) - i)\n","    total -= counts[name]\n","  return counts\n","\n","def example_to_dict(example):\n","  \"\"\"Converts a tf.train.Example to a dictionary.\"\"\"\n","  example_dict = {}\n","  for name, value in example.features.feature.items():\n","    if value.HasField('bytes_list'):\n","      value = value.bytes_list.value\n","    elif value.HasField('int64_list'):\n","      value = value.int64_list.value\n","    elif value.HasField('float_list'):\n","      value = value.float_list.value\n","    else:\n","      raise 'Unknown *_list type!'\n","    if len(value) == 1:\n","      example_dict[name] = value[0]\n","    else:\n","      example_dict[name] = np.array(value)\n","  return example_dict\n","\n","def make_sharded_files(make_example, path, labels, iters, counts, splits,\n","                       shards=10, overwrite=False, report_dt=10, make_df=False):\n","  \"\"\"Create sharded dataset from \"iters\".\n","\n","  Args:\n","    make_example: Converts object returned by elements of \"iters\"\n","        to tf.train.Example() proto.\n","    path: Directory that will contain recordio files.\n","    labels: Names of labels, will be written to \"labels.txt\".\n","    iters: List of iterables returning drawing objects.\n","    counts: Dictionary mapping class to number of examples.\n","    splits: Dictionary mapping filename to multiple of examples. For example,\n","        splits=dict(a=2, b=1) will result in two exampels being written to \"a\"\n","        for every example being written to \"b\".\n","    shards: Number of files to be created per split.\n","    overwrite: Whether a pre-existing directory should be overwritten.\n","    report_dt: Number of seconds between status updates (0=no updates).\n","    make_df: Also write data as pandas.DataFrame - do NOT use this with very\n","        large datasets that don't fit in memory!\n","\n","  Returns:\n","    Total number of examples written to disk per split.\n","  \"\"\"\n","  assert len(iters) == len(labels)\n","  # Prepare output.\n","  if not os.path.exists(path):\n","    os.makedirs(path)\n","  paths = {\n","      split: ['%s/%s-%05d-of-%05d' % (path, split, i, shards)\n","              for i in range(shards)]\n","      for split in splits\n","  }\n","  assert overwrite or not os.path.exists(paths.values()[0][0])\n","  writers = {\n","      split: [tf.python_io.TFRecordWriter(ps[i]) for i in range(shards)]\n","      for split, ps in paths.items()\n","  }\n","  t0 = time.time()\n","  examples_per_split = collections.defaultdict(int)\n","  i, n = 0, sum(counts.values())\n","  counts = dict(**counts)\n","  rows = []\n","  # Create examples.\n","  while sum(counts.values()):\n","    name = rand_key(counts)\n","    split = get_split(i, splits)\n","    writer = writers[split][examples_per_split[split] % shards]\n","    label = labels.index(name)\n","    \n","    example = make_example(label, next(iters[label]))\n","    writer.write(example.SerializeToString())\n","    if make_df:\n","      example.features.feature['split'].bytes_list.value.append(split.encode('utf8'))\n","      rows.append(example_to_dict(example))\n","    examples_per_split[split] += 1\n","    i += 1\n","    if report_dt > 0 and time.time() - t0 > report_dt:\n","      print('processed %d/%d (%.2f%%)' % (i, n, 100. * i / n))\n","      t0 = time.time()\n","  # Store results.\n","  for split in splits:\n","    for writer in writers[split]:\n","      writer.close()\n","  with open('%s/labels.txt' % path, 'w') as f:\n","    f.write('\\n'.join(labels))\n","  with open('%s/counts.json' % path, 'w') as f:\n","    json.dump(examples_per_split, f)\n","  if make_df:\n","    df_path = '%s/dataframe.pkl' % path\n","    print('Writing %s...' % df_path)\n","    pd.DataFrame(rows).to_pickle(df_path)\n","  return dict(**examples_per_split)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"bTKJ97zgIqdw","colab_type":"text"},"cell_type":"markdown","source":["## Rasterize"]},{"metadata":{"id":"-iC0LzzvItkY","colab_type":"code","colab":{}},"cell_type":"code","source":["def dict_to_img(drawing, img_sz=64, lw=3, maximize=True):\n","  \"\"\"Converts QuickDraw data to quadratic rasterized image.\n","  \n","  Args:\n","    drawing: Dictionary instance of QuickDraw dataset.\n","    img_sz: Size output image (in pixels).\n","    lw: Line width (in pixels).\n","    maximize: Whether to maximize drawing within image pixels.\n","    \n","  Returns:\n","    A PIL.Image with the rasterized drawing.\n","  \"\"\"\n","  img = Image.new('L', (img_sz, img_sz))\n","  draw = ImageDraw.Draw(img)\n","  \n","  stroke = drawing['stroke'][0:2] \n","  i=0\n","  print(stroke[i:i+2])\n","  \n","  lines = np.array([ drawing['stroke'][0:2, i:i+2] for i in range(len(drawing['stroke'][0]) -1) ], dtype=np.float32)\n","  if maximize:\n","    for i in range(2):\n","      min_, max_ = lines[:,i,:].min() * 0.95, lines[:,i,:].max() * 1.05\n","      lines[:,i,:] = (lines[:,i,:] - min_) / max(max_ - min_, 1)\n","  else:\n","    lines /= 1024\n","  for line in lines:\n","    draw.line(tuple(line.T.reshape((-1,)) * img_sz), fill='white', width=lw)\n","  return img"],"execution_count":0,"outputs":[]},{"metadata":{"id":"C-aM81mdIumV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":633},"outputId":"6e802fee-0fa5-4f93-c445-213ab55b8269","executionInfo":{"status":"error","timestamp":1552667971391,"user_tz":-60,"elapsed":1135,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}}},"cell_type":"code","source":["from PIL import Image, ImageDraw\n","# Show some examples.\n","\n","def showimg(img):\n","  \"\"\"Shows an image with an inline HTML <img> tag.\n","  \n","  Args:\n","    img: Can be a PIL.Image or a numpy.ndarray.\n","  \"\"\"\n","  if isinstance(img, np.ndarray):\n","    img = Image.fromarray(img, 'L')\n","  b = io.BytesIO()\n","  img.convert('RGB').save(b, format='png')\n","  enc = base64.b64encode(b.getvalue()).decode('utf-8')\n","  display.display(display.HTML(\n","      '<img src=\"data:image/png;base64,%s\">' % enc))\n","\n","# Fetch some images + shuffle order.\n","rows, cols = len(labels), 10\n","n_per_class = rows * cols // len(labels) + 1\n","drawings_list = [drawing for name in labels\n","                 for drawing in loadn(name, cols, stroke=True)]\n","\n","# Create mosaic of rendered images.\n","lw = 4\n","img_sz = 64\n","tableau = np.zeros((img_sz * rows, img_sz * cols), dtype=np.uint8)\n","for y in range(rows):\n","  for x in range(cols):\n","    i = y * cols + x\n","    img = dict_to_img(drawings_list[i], img_sz=img_sz, lw=lw, maximize=True)\n","    tableau[y*img_sz:(y+1)*img_sz,\n","            x*img_sz:(x+1)*img_sz] = np.asarray(img)\n","\n","showimg(tableau)\n","print('{} samples of : {}'.format(cols, ' '.join(labels)))"],"execution_count":142,"outputs":[{"output_type":"stream","text":["[array([557, 550, 550, 550, 505, 505, 450, 450, 377, 336, 298, 268, 242,\n","       230, 235, 254, 254, 337, 392, 452, 518, 577, 632, 676, 707, 728,\n","       739, 739, 727, 727, 684, 661, 643, 628, 621, 622, 635, 635, 689,\n","       689, 759, 759, 841, 888]), array([ 844,  803,  803,  803,  803,  803,  833,  833,  903,  957, 1014,\n","       1086, 1144, 1214, 1272, 1317, 1317, 1347, 1334, 1298, 1247, 1178,\n","       1105, 1026,  951,  888,  835,  835,  785,  785,  824,  875,  935,\n","       1000, 1066, 1126, 1177, 1177, 1239, 1239, 1269, 1269, 1285, 1291])]\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-142-4054f1b15f5b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mcols\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m     \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_img\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrawings_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimg_sz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimg_sz\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaximize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m     tableau[y*img_sz:(y+1)*img_sz,\n\u001b[1;32m     33\u001b[0m             x*img_sz:(x+1)*img_sz] = np.asarray(img)\n","\u001b[0;32m<ipython-input-141-734b3948ed14>\u001b[0m in \u001b[0;36mdict_to_img\u001b[0;34m(drawing, img_sz, lw, maximize)\u001b[0m\n\u001b[1;32m     18\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstroke\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m   \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m \u001b[0mdrawing\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'stroke'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrawing\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'stroke'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mmaximize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-141-734b3948ed14>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     18\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstroke\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m   \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m \u001b[0mdrawing\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'stroke'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrawing\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'stroke'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mmaximize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not tuple"]}]},{"metadata":{"id":"UWhb9iR0Ffl1","colab_type":"text"},"cell_type":"markdown","source":["## create amn img datatset"]},{"metadata":{"id":"2oSxYX1E4yhk","colab_type":"code","colab":{}},"cell_type":"code","source":["alphabet =list(string.ascii_letters)\n","labels, dataset_name = alphabet, 'alphabet'\n","path = '%s/%s_stroke' % (data_path, dataset_name)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Vh9VsNn2Igg-","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"J_IHm0KOFjRN","colab_type":"code","colab":{}},"cell_type":"code","source":["# Uses dict_to_img() from previous cell to create raster image.\n","\n","def make_example_img(label, drawing):\n","  \"\"\"Converts QuickDraw dictionary to example with rasterized data.\n","\n","  Args:\n","    label: Numerical representation of the label (e.g. \"0\" for labels[0]).\n","    drawing: Dictionary with QuickDraw data.\n","\n","  Returns:\n","    A tf.train.Example protocol buffer (with \"label\", \"img_64\", and additional\n","    metadata features).\n","  \"\"\"\n","  example = tf.train.Example()\n","  example.features.feature['label'].int64_list.value.append(label)\n","  stroke = dict_to_stroke(drawing)\n","  stroke = stroke.cumsum(axis=1)\n","  img_64 = np.asarray(dict_to_img(stroke, img_sz=64, lw=4, maximize=True)).reshape(-1)\n","  example.features.feature['img_64'].int64_list.value.extend(img_64)\n","  example.features.feature['l_id'].bytes_list.value.append(drawing['l_id'].encode())\n","  example.features.feature['stroke_order'].int64_list.value.append(int(drawing['stroke_order']))\n","  example.features.feature['letter'].bytes_list.value.append(drawing['letter'].encode())\n","  example.features.feature['key_id'].int64_list.value.append(int(drawing['key_id']))\n","  return example"],"execution_count":0,"outputs":[]},{"metadata":{"id":"zAIHSf82GJ1Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":505},"outputId":"35d302e4-6456-49e5-9c97-f68c45244f9c","executionInfo":{"status":"error","timestamp":1552666441248,"user_tz":-60,"elapsed":1584,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}}},"cell_type":"code","source":["# Create the (rasterized) dataset.\n","\n","path = '%s/%s_img' % (data_path, dataset_name)\n","t0 = time.time()\n","examples_per_split = make_sharded_files(\n","    make_example=make_example_img,\n","    path=path,\n","    labels=labels,\n","    iters=[loaditer(name,stroke=True) for name in labels],\n","    # Creating 50k train, 10k eval, 20k test examples. Takes ~2min\n","    # Note : Larger datasets take longer to generate and to train on, but\n","    #        also lead to better classification results.\n","    counts=make_counts(labels, 6240),\n","    splits=dict(train=5, eval=1, test=2),\n","    overwrite=True,\n","    # Note : Set this to False when generating large datasets...\n","    make_df=False,\n",")\n","\n","### If you don't see the final output below, it's probably because your VM\n","### has run out of memory and crashed !! This can happen with make_df=True ...\n","\n","print('stored data to \"%s\"' % path)\n","print('generated %s examples in %d seconds' % (examples_per_split, time.time() - t0))"],"execution_count":90,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-90-062d2f385433>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0moverwrite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m# Note : Set this to False when generating large datasets...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mmake_df\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m )\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-83-33dc1d0046d6>\u001b[0m in \u001b[0;36mmake_sharded_files\u001b[0;34m(make_example, path, labels, iters, counts, splits, shards, overwrite, report_dt, make_df)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m     \u001b[0mexample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_example\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSerializeToString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmake_df\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-85-8c12c3187fde>\u001b[0m in \u001b[0;36mmake_example_img\u001b[0;34m(label, drawing)\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mstroke\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_stroke\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrawing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0mstroke\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstroke\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcumsum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m   \u001b[0mimg_64\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict_to_img\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstroke\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimg_sz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaximize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m   \u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'img_64'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint64_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_64\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m   \u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'l_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbytes_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrawing\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'l_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'dict_to_img' is not defined"]}]},{"metadata":{"id":"8P69Of4RFcCq","colab_type":"text"},"cell_type":"markdown","source":["## Create a stroke dataset\n"]},{"metadata":{"id":"6vSd8lYhLF-W","colab_type":"code","colab":{}},"cell_type":"code","source":["# Uses dict_to_stroke() from previous cell to create raster image.\n","\n","def make_example_stroke(label, drawing):\n","  \"\"\"Converts QuickDraw dictionary to example with stroke data.\n","\n","  Args:\n","    label: Numerical representation of the label (e.g. \"0\" for labels[0]).\n","    drawing: Dictionary with QuickDraw data.\n","\n","  Returns:\n","    A tf.train.Example protocol buffer (with \"label\", \"stroke_x\", \"stroke_y\",\n","    \"stroke_z\", and additional metadata features).\n","  \"\"\"\n","  example = tf.train.Example()\n","  example.features.feature['label'].int64_list.value.append(label)\n","  stroke = dict_to_stroke(drawing)\n","  stroke = stroke.cumsum(axis=1)\n","  example.features.feature['stroke_x'].float_list.value.extend(stroke[0,:])\n","  example.features.feature['stroke_y'].float_list.value.extend(stroke[1,:])\n","  #example.features.feature['stroke_z'].float_list.value.extend(stroke[2, :])\n","  example.features.feature['stroke_len'].int64_list.value.append(stroke.shape[1])\n","  example.features.feature['l_id'].bytes_list.value.append(drawing['l_id'].encode())\n","  example.features.feature['stroke_order'].int64_list.value.append(int(drawing['stroke_order']))\n","  example.features.feature['letter'].bytes_list.value.append(drawing['letter'].encode())\n","  #ts = drawing['timestamp']\n","  #ts = time.mktime(time.strptime(ts[:ts.index('.')], '%Y-%m-%d %H:%M:%S'))\n","  #example.features.feature['timestamp'].int64_list.value.append(int(ts))\n","  example.features.feature['key_id'].bytes_list.value.append(drawing['keyid'].encode())\n","  return example"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DS399cao7iJW","colab_type":"text"},"cell_type":"markdown","source":["## Split the data into training, validation and test sets"]},{"metadata":{"id":"7SbYQBSZuSBf","colab_type":"code","outputId":"fe931792-b66a-430d-ede1-935f25df1cec","executionInfo":{"status":"ok","timestamp":1552666342310,"user_tz":-60,"elapsed":2879,"user":{"displayName":"Wafa Johal","photoUrl":"https://lh6.googleusercontent.com/-dSe4vNhtGJo/AAAAAAAAAAI/AAAAAAAAIHU/HpRPL_mjkKo/s64/photo.jpg","userId":"02628719330545126296"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["path = '%s/%s_stroke' % (data_path, dataset_name)\n","t0 = time.time()\n","examples_per_split = make_sharded_files(\n","    make_example=make_example_stroke,\n","    path=path,\n","    labels=labels,\n","    iters=[loaditer(name, stroke=True) for name in labels],\n","    # Creating 50k train, 10k eval, 20k test examples. Takes ~2min\n","    # Note : You can improve \n","    counts=make_counts(labels, 6240),\n","    splits=dict(train=5, eval=1, test=2),\n","    overwrite=True,\n","    # Note : Set this to False when generating large datasets...\n","    make_df=False,\n",")\n","\n","print('stored data to \"%s\"' % path)\n","print('generated %s examples in %d seconds' % (examples_per_split, time.time() - t0))"],"execution_count":88,"outputs":[{"output_type":"stream","text":["stored data to \"/content/gdrive/My Drive/Colab Notebooks/copainter_data/alphabet_stroke\"\n","generated {'eval': 780, 'test': 1560, 'train': 3900} examples in 2 seconds\n"],"name":"stdout"}]},{"metadata":{"id":"HkTpV_2GICe8","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}